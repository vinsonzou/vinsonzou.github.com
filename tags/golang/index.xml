<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>golang - 标签 - cloudSky's 小站</title><link>https://ops.m114.org/tags/golang/</link><description>golang - 标签 - cloudSky's 小站</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 19 Feb 2023 20:10:00 +0800</lastBuildDate><atom:link href="https://ops.m114.org/tags/golang/" rel="self" type="application/rss+xml"/><item><title>[Go] slice删除元素的性能对比</title><link>https://ops.m114.org/post/performance-comparison-of-go-slice-deleting-elements/</link><pubDate>Sun, 19 Feb 2023 20:10:00 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/performance-comparison-of-go-slice-deleting-elements/</guid><description><![CDATA[环境 MacBook Pro (Retina, 13-inch, Mid 2014) Intel(R) Core(TM) i5-4278U CPU @ 2.60GHz go 1.20 代码如下 package bechmark import ( &#34;testing&#34; ) var ( // 原始slice origin = []string{&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;, &#34;f&#34;, &#34;g&#34;, &#34;h&#34;} // 需要删除的元素 targetEle = &#34;e&#34; ) // 第一种 func BenchmarkMake(t *testing.B) { t.ResetTimer() for i :=]]></description></item><item><title>[Go] 使用execCommand时，如何关闭子进程</title><link>https://ops.m114.org/post/how-to-kill-child-process-when-using-go-execcommand/</link><pubDate>Mon, 26 Dec 2022 13:30:00 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/how-to-kill-child-process-when-using-go-execcommand/</guid><description>需求 Unity打包调度程序，正在打包的任务，可以发送指令取消，每个任务都有唯一的任务Id。 实现 本文实现仅支持 Linux/Mac，暂不支持Wi</description></item><item><title>[Go] redis库使用</title><link>https://ops.m114.org/post/go-redis/</link><pubDate>Tue, 18 Oct 2022 17:11:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-redis/</guid><description>环境 redis库：github.com/go-redis/redis/v8 需求 使用redis存储Unity Meta guid信息，用于提交svn时检</description></item><item><title>[Go] 1.18新增库之net/netip</title><link>https://ops.m114.org/post/go-1.18-netip/</link><pubDate>Sun, 16 Oct 2022 14:01:00 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-1.18-netip/</guid><description><![CDATA[go1.18标准库都支持了，还直接支持ipv6判断包含之类的。 示例如下 package main import ( &#34;fmt&#34; &#34;net/netip&#34; ) func main() { p, err := netip.ParsePrefix(`10.10.10.0/24`) if err != nil { panic(err) } a, err := netip.ParseAddr(`10.10.10.6`) if err != nil { panic(err) } fmt.Println(p.Contains(a)) }]]></description></item><item><title>[Go] 函数参数传递的sync.Mutex不是指针会怎么样</title><link>https://ops.m114.org/post/go-sync-mutex-pass-as-function-param-is-not-pointer/</link><pubDate>Thu, 15 Sep 2022 09:39:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-sync-mutex-pass-as-function-param-is-not-pointer/</guid><description><![CDATA[函数传值 package main import ( &#34;fmt&#34; &#34;sync&#34; ) var a = 1 func t(lock sync.Mutex, wg *sync.WaitGroup) { defer wg.Done() lock.Lock() defer lock.Unlock() for i := 0; i &lt; 10000000; i++ { a++ } } func main() { lock := sync.Mutex{} wg := &amp;sync.WaitGroup{} wg.Add(2) go t(lock, wg) go t(lock, wg) wg.Wait() fmt.Println(a) } 输出 // 每次输出值都不一样 10149117]]></description></item><item><title>[Go] json的html转义问题</title><link>https://ops.m114.org/post/go-json-html-escape/</link><pubDate>Fri, 13 May 2022 10:11:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-json-html-escape/</guid><description>环境 json库：github.com/goccy/go-json 问题 go语言提供了json的编解码包，json字符串作为参数值传输时发现，j</description></item><item><title>[Go] 飞书电子表格导出Excel文件</title><link>https://ops.m114.org/post/go-feishu-spreadsheet-export-excel/</link><pubDate>Thu, 12 May 2022 11:10:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-feishu-spreadsheet-export-excel/</guid><description>飞书电子表格网页版有导出Excel功能，但公布的API文档中没有此接口，目前使用读取单元格数据， 然后使用excelize流式写入excel，</description></item><item><title>[Go] 将带参数的函数传递给time.AfterFunc</title><link>https://ops.m114.org/post/go-time-afterfunc-with-arguments/</link><pubDate>Sun, 08 May 2022 19:30:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-time-afterfunc-with-arguments/</guid><description>time.AfterFunc() 接受持续时间和要在该持续时间到期时执行的函数。但函数不能是接受参数的函数。 例如：无法传递以下函数： func Foo (b *Bar) {} 但是，可以初始化调用上述函数的</description></item><item><title>[Go] 怎么正确实现枚举？答案藏着官方的源码里</title><link>https://ops.m114.org/post/go-enum-demo/</link><pubDate>Tue, 18 Jan 2022 10:34:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-enum-demo/</guid><description>后来这两年主要在用Go做项目，我发现相似的问题 Go 里也存在，但是 Go 并没有提供枚举类型，那怎么做到进行状态值的正确限制呢？如果还是用 int 型的常量肯</description></item><item><title>[Go] 使用gin+websocket实现日志实时输出</title><link>https://ops.m114.org/post/go-gin-websocket/</link><pubDate>Fri, 07 Jan 2022 15:48:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-gin-websocket/</guid><description>背景 由于工作需要，在web端执行相关的部署操作，能够在页面实时展示部署任务的实时日志信息，使用到websocket来实现。 websocket</description></item></channel></rss>
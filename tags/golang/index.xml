<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on ops</title>
    <link>https://ops.m114.org/tags/golang/index.xml</link>
    <description>Recent content in Golang on ops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2014-2018. All rights reserved.</copyright>
    <atom:link href="https://ops.m114.org/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>go如何编译出更小的执行文件?</title>
      <link>https://ops.m114.org/post/go-build-small-exec/</link>
      <pubDate>Wed, 23 Aug 2017 23:38:09 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/go-build-small-exec/</guid>
      <description>

&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;本地默认编译出的文件总与官方提供的二进制文件大很多，Google之后得知通过编译参数控制还能编译出更小的可执行文件。&lt;/p&gt;

&lt;h1 id=&#34;加-ldflags参数&#34;&gt;加-ldflags参数&lt;/h1&gt;

&lt;p&gt;在程序编译的时候可以加上&lt;code&gt;-ldflags &amp;quot;-s -w&amp;quot;&lt;/code&gt; 参数来优化编译程序, 其实通过去除部分连接和调试等信息来使得编译之后的执行程序更小,具体参数如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-a 强制编译所有依赖包&lt;/li&gt;
&lt;li&gt;-s 去掉符号表信息, panic时候的stack trace就没有任何文件名/行号信息了&lt;/li&gt;
&lt;li&gt;-w 去掉DWARF调试信息，得到的程序就不能用gdb调试了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;测试代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    fmt.Println(&amp;quot;Hello, 世界&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译方式及文件大小对比结果如下&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编译参数&lt;/th&gt;
&lt;th&gt;大小&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;go build(默认)&lt;/td&gt;
&lt;td&gt;1.6M&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;go build -ldflags -s&lt;/td&gt;
&lt;td&gt;1.6M&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;go build -ldflags &amp;ldquo;-s -w&amp;rdquo;&lt;/td&gt;
&lt;td&gt;1.1M&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;go build -ldflags -w&lt;/td&gt;
&lt;td&gt;1.1M&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;测试环境: go 1.8.3 on macOS 10.12.6
不建议s和w同时使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;使用upx&#34;&gt;使用upx&lt;/h1&gt;

&lt;p&gt;上面go build 时加上-ldflags参数得到了比较小的可执行程序，但是还可以通过upx这个开源，绿色，好用的压缩工具进行进一步压缩。&lt;/p&gt;

&lt;p&gt;Mac用户直接brew安装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install upx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;upx使用效果如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2017
UPX 3.94        Markus Oberhumer, Laszlo Molnar &amp;amp; John Reiser   May 12th 2017

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
   1181728 -&amp;gt;    438928   37.14%   macho/amd64   test

Packed 1 file.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到通过upx进一步压缩之后得到的程序只有429K了，压缩比率达到了37.14%.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang之command line flag笔记</title>
      <link>https://ops.m114.org/post/golang-command-line-flags/</link>
      <pubDate>Wed, 16 Aug 2017 23:28:33 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/golang-command-line-flags/</guid>
      <description>&lt;p&gt;&lt;strong&gt;示例代码，仅供参考&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;flag&amp;quot;
)

func main() {
    // golang的flag包的一些基本使用方法

    // 待使用的变量
    var id int
    var name string
    var male bool

    // 是否已经解析
    fmt.Println(&amp;quot;parsed? = &amp;quot;, flag.Parsed())

    // 设置flag参数 (变量指针，参数名，默认值，帮助信息)
    // 也可以用以下带返回值的方法代替，不过他们返回的是指针，比较麻烦点
    // Int(name string, value int, usage string) *int
    // String(name string, value string, usage string) *string
    // Bool(name string, value bool, usage string) *bool
    flag.IntVar(&amp;amp;id, &amp;quot;id&amp;quot;, 123, &amp;quot;help msg for id&amp;quot;)
    flag.StringVar(&amp;amp;name, &amp;quot;name&amp;quot;, &amp;quot;default name&amp;quot;, &amp;quot;help msg for name&amp;quot;)
    flag.BoolVar(&amp;amp;male, &amp;quot;male&amp;quot;, false, &amp;quot;help msg for male&amp;quot;)

    // 解析
    flag.Parse()

    // 是否已经解析
    fmt.Println(&amp;quot;parsed? = &amp;quot;, flag.Parsed())

    // 获取非flag参数
    fmt.Println(&amp;quot;------ Args start ------&amp;quot;)
    for i, v := range flag.Args() {
        fmt.Printf(&amp;quot;arg[%d] = (%s).\n&amp;quot;, i, v)
    }
    fmt.Println(&amp;quot;------ Args end ------&amp;quot;)

    // visit只包含已经设置了的flag
    fmt.Println(&amp;quot;------ visit flag start ------&amp;quot;)
    flag.Visit(func(f *flag.Flag) {
        fmt.Println(f.Name, f.Value, f.Usage, f.DefValue)
    })
    fmt.Println(&amp;quot;------ visit flag end ------&amp;quot;)

    // visitAll只包含所有的flag(包括未设置的)
    fmt.Println(&amp;quot;------ visitAll flag start ------&amp;quot;)
    flag.VisitAll(func(f *flag.Flag) {
        fmt.Println(f.Name, f.Value, f.Usage, f.DefValue)

    })
    fmt.Println(&amp;quot;------ visitAll flag end ------&amp;quot;)

    // flag参数
    fmt.Printf(&amp;quot;id = %d\n&amp;quot;, id)
    fmt.Printf(&amp;quot;name = %s\n&amp;quot;, name)
    fmt.Printf(&amp;quot;male = %t\n&amp;quot;, male)

    // flag参数默认值
    fmt.Println(&amp;quot;------ PrintDefaults start ------&amp;quot;)
    flag.PrintDefaults()
    fmt.Println(&amp;quot;------ PrintDefaults end ------&amp;quot;)

    // 非flag参数个数
    fmt.Printf(&amp;quot;NArg = %d\n&amp;quot;, flag.NArg())
    // 已设置的flag参数个数
    fmt.Printf(&amp;quot;NFlag = %d\n&amp;quot;, flag.NFlag())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;传参数go run&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go run flag_demo.go -id=123 -name=&amp;quot;zhangsan&amp;quot; -male=true p1 p2 p3 p4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;示例输出结果&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parsed? =  false
parsed? =  true
------ Args start ------
arg[0] = (p1).
arg[1] = (p2).
arg[2] = (p3).
arg[3] = (p4).
------ Args end ------
------ visit flag start ------
id 123 help msg for id 123
male true help msg for male false
name zhangsan help msg for name default name
------ visit flag end ------
------ visitAll flag start ------
id 123 help msg for id 123
male true help msg for male false
name zhangsan help msg for name default name
------ visitAll flag end ------
id = 123
name = zhangsan
male = true
------ PrintDefaults start ------
  -id int
    	help msg for id (default 123)
  -male
    	help msg for male
  -name string
    	help msg for name (default &amp;quot;default name&amp;quot;)
------ PrintDefaults end ------
NArg = 4
NFlag = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gobyexample.com/command-line-flags&#34;&gt;https://gobyexample.com/command-line-flags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>golang sync.WaitGroup解决goroutine同步</title>
      <link>https://ops.m114.org/post/sync-WaitGroup/</link>
      <pubDate>Mon, 03 Jul 2017 16:27:12 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/sync-WaitGroup/</guid>
      <description>&lt;p&gt;&lt;strong&gt;go提供了sync包和channel来解决协程同步和通讯。&lt;/strong&gt;新手对channel通道操作起来更容易产生死锁，如果时缓冲的channel还要考虑channel放入和取出数据的速率问题。&lt;/p&gt;

&lt;p&gt;从字面就可以理解，sync.WaitGroup是等待一组协程结束。它实现了一个类似任务队列的结构，你可以向队列中加入任务，任务完成后就把任务从队列中移除，如果队列中的任务没有全部完成，队列就会触发阻塞以阻止程序继续运行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sync.WaitGroup只有3个方法，Add()，Done()，Wait()。&lt;/strong&gt; 其中Done()是Add(-1)的别名。简单的来说，使用Add()添加计数，Done()减掉一个计数，计数不为0, 阻塞Wait()的运行。&lt;/p&gt;

&lt;p&gt;简单示例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main
 
import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;sync&amp;quot;
)
 
var waitgroup sync.WaitGroup
 
func test(shownum int) {
	fmt.Println(shownum)
	waitgroup.Done() //任务完成，将任务队列中的任务数量-1，其实.Done就是.Add(-1)
}
 
func main() {
	for i := 0; i &amp;lt; 10; i++ {
		waitgroup.Add(1) //每创建一个goroutine，就把任务队列中任务的数量+1
		go test(i)
	}
	waitgroup.Wait() //.Wait()这里会发生阻塞，直到队列中所有的任务结束就会解除阻塞
	fmt.Println(&amp;quot;done!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ps: 此文为学习记录，如有错误还请多指教。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用Hugo搭建免费个人Blog</title>
      <link>https://ops.m114.org/post/how-to-use-hugo/</link>
      <pubDate>Tue, 11 Nov 2014 17:15:00 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/how-to-use-hugo/</guid>
      <description>

&lt;h1 id=&#34;hugo是什么&#34;&gt;Hugo是什么&lt;/h1&gt;

&lt;p&gt;Hugo是一个工具，可以用于搭建静态站点，类似jekyll，不过Hugo是Golang写的，大家应该知道Golang有一个对部署友好的特点，那就是静态编译，所以安装起来非常方便，不像jekyll安装起来比较麻烦。&lt;/p&gt;

&lt;p&gt;可能有些读者也不知道jekyll是干啥的，我这简单解释一下，这些软件通常可以叫做静态站点生成器，我们可以使用Markdown格式编写一些文本，按照指定的目录结构存放，然后再在指定的目录里放置css等静态文件，jekyll就可以帮你生成一个静态站点。那既然是静态站点，你就可以很方便的部署了，因为只要搭配一个web server即可，甚至可以部署在github pages上，&lt;a href=&#34;http://ops.m114.org&#34;&gt;ops.m114.org&lt;/a&gt;是部署在gitcafe pages上的，这样国人访问速度快一些。因为github和gitcafe的pages功能是免费的，这也是我标题中“免费”二次的原因&lt;/p&gt;

&lt;h1 id=&#34;hugo的使用&#34;&gt;Hugo的使用&lt;/h1&gt;

&lt;p&gt;Hugo的官网是&lt;a href=&#34;http://gohugo.io/&#34;&gt;gohugo.io&lt;/a&gt;，里边有个Docs，大家可以跟着走一遍，主要是里边的quickstart。笔者就不给大家做翻译了，给读者介绍一下如何基于笔者这个Blog来搭建，在这基础上修改就要容易不少了。&lt;/p&gt;

&lt;h2 id=&#34;下载hugo&#34;&gt;下载Hugo&lt;/h2&gt;

&lt;p&gt;官网上首页就有下载链接，去&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo下载&lt;/a&gt;即可&lt;/p&gt;

&lt;h2 id=&#34;把笔者的这个blog-clone下来&#34;&gt;把笔者的这个blog clone下来&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/vinsonzou/hugo.blog.git
cd hugo.blog
hugo server -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码是Linux、OS X控制台命令，windows用户请自己转换成windows操作方法。看到控制台打印出的内容了么？Hugo已经帮忙生成了一个静态站点，并且监听在本机的1313端口，访问一下试试吧：）&lt;/p&gt;

&lt;h2 id=&#34;修改hugo-blog&#34;&gt;修改hugo.blog&lt;/h2&gt;

&lt;p&gt;一行代码就跑起来了，是不是so easy，接下来笔者大体介绍一下各个目录中的作用，读者可以修改成自己的一些信息&lt;/p&gt;

&lt;p&gt;content目录就是存放你原始markdown文本的地方，content的子目录和markdown文件名组成了url地址，比如这篇文章的url是：&lt;a href=&#34;http://ops.m114.org/post/how-to-use-hugo/&#34;&gt;http://ops.m114.org/post/how-to-use-hugo/&lt;/a&gt; ，那是因为content目录下有个post/how-to-use-hugo.md&lt;/p&gt;

&lt;p&gt;public目录是刚才运行&lt;code&gt;hugo server -w&lt;/code&gt;命令生成的，这里边的内容就是静态站点的内容，之后咱们把这些内容提交到gitcafe pages中&lt;/p&gt;

&lt;p&gt;static目录是存放一些静态资源&lt;/p&gt;

&lt;p&gt;themes目录是主题目录，我使用了hyde这个主题，在上面做了一些修改，读者要想让Blog比较个性化，就可以定制主题&lt;/p&gt;

&lt;p&gt;themes/hyde/{layouts,static}是我们主要修改的内容。index.html是首页，你修改一下看看，浏览器会自动刷新看到效果；partials目录是存放的一些页面片段，便于复用；_default目录是博文单页和博文列表页面，相信你一看就懂；static目录中有一些css，想怎么个性化就调整它们就成了&lt;/p&gt;

&lt;h1 id=&#34;使用gitcafe-pages制作站点&#34;&gt;使用gitcafe pages制作站点&lt;/h1&gt;

&lt;p&gt;上面搞定之后，最好把修改之后的内容push到github上。public目录无需push，这是每次都可以自动生成的。咱们这里要把public也作为一个repo，push到gitcafe，生成静态站点。&lt;/p&gt;

&lt;p&gt;gitcafe有个帮助文档：&lt;a href=&#34;https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki&#34;&gt;GitCafe Pages&lt;/a&gt;，照着搞一下，把public的内容push上去，绑定域名，O了&lt;/p&gt;

&lt;p&gt;是不是很简单，有明白的地方可以查看Hugo文档或留言。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
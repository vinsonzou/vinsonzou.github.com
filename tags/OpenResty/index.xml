<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenResty on ops</title>
    <link>https://ops.m114.org/tags/OpenResty/</link>
    <description>Recent content in OpenResty on ops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2014-2021. All rights reserved.</copyright>
    <lastBuildDate>Fri, 08 Oct 2021 11:13:08 +0800</lastBuildDate><atom:link href="https://ops.m114.org/tags/OpenResty/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用OpenResty reload ipsec服务</title>
      <link>https://ops.m114.org/post/openresty-privileged-agent/</link>
      <pubDate>Fri, 08 Oct 2021 11:13:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/openresty-privileged-agent/</guid>
      <description>背景介绍  Debian 11 OpenResty 1.19.9.1  默认情况下，Nginx/OpenResty会启动一个root权限运行的master进程，之后再用指定的普通用户权限启动对应的worker，因要root权限才能操作ipsec服务，为了解决普通worker的提权问题，OpenResty提供了一个privileged agent来对这些提权操作进行处理，本文就是利用privileged agent来实现ipsec服务的重启操作。
基本思路 在OpenResty的 init_by_lua_block 阶段启动privileged agent，之后在 init_worker_by_lua_block 阶段针对privileged agent设置其具体需要执行的操作，最终在 content_by_lua_block 中通过改变共享内存的 lua_shared_dict 字段的内容触发对应的reload操作。
对应配置 root@debian:~# cat /etc/openresty/nginx.conf ... user app; #普通用户启动worker ... http { ... lua_shared_dict reload_status 1m; #共享内存dict init_by_lua_block { local process = require &amp;#34;ngx.process&amp;#34; -- enables privileged agent process local ok, err = process.enable_privileged_agent() if not ok then ngx.log(ngx.ERR, &amp;#34;enables privileged agent failed error:&amp;#34;, err) end -- output process type ngx.</description>
    </item>
    
    <item>
      <title>使用OpenResty mTLS认证</title>
      <link>https://ops.m114.org/post/openresty-mtls/</link>
      <pubDate>Wed, 29 Sep 2021 13:08:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/openresty-mtls/</guid>
      <description>环境  CentOS 7 OpenResty 1.19.9.1  cosocket-mtls patch  ngx_lua-0.10.20_01-cosocket-mtls.patch lua-resty-core-0.1.22_01-cosocket-mtls.patch   lua-resty-http    为了支持mTLS功能，折腾的够呛，OpenResty官方又没支持，基于OpenResty的APISIX和Kong都有补丁，但两家公司的补丁又有点细微的差别。APISIX的定制OpenResty版本目前仅支持到1.19.3，而Kong的定制OpenResty跟官方版本是同步的。此处的方案就是用Kong的patch和APISIX的lua-resty-http(我稍微改了一丢丢兼容Kong的patch)。
功能  OpenResty作为客户端调用外部HTTP接口, 使用mTLS认证  Server配置 对应nginx配置
server { listen 443 ssl; server_name ssl.test.com; ssl_certificate ssl/mtls_server.crt; #server公钥 ssl_certificate_key ssl/mtls_server.key; #server私钥 ssl_client_certificate ssl/mtls_ca.crt; #根级证书公钥，用于验证各个二级client ssl_verify_client on; } 请求验证  curl命令行验证  curl --resolve ssl.test.com:443:127.0.0.1 --cacert ssl/mtls_ca.crt --cert ssl/mtls_client.crt --key mtls_client.key https://ssl.test.com  lua-resty-http验证  location /t { resolver local=on ipv6=off; resolver_timeout 5s; lua_ssl_verify_depth 1; lua_ssl_trusted_certificate /data/nginx/mtls/ca.</description>
    </item>
    
    <item>
      <title>使用OpenResty实现简易CC防护</title>
      <link>https://ops.m114.org/post/openresty-anticc/</link>
      <pubDate>Sat, 11 Sep 2021 11:08:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/openresty-anticc/</guid>
      <description>环境  CentOS 7 OpenResty 1.19.9.1  lua-resty-ipmatcher lua-var-nginx-module    功能  支持IP白名单 支持IP黑名单 计数key为：ip + &amp;ldquo;.&amp;rdquo; + md5(host + request_uri + useragent)，可自定义 60秒内请求超过60次就封禁3600秒  配置 对应nginx配置
lua_shared_dict cc_counter 100m; server { listen 80; server_name demo.test.com; location / { access_by_lua_file lua/anticc.lua; } } anticc.lua
 </description>
    </item>
    
    <item>
      <title>使用Nginx实现授权下载</title>
      <link>https://ops.m114.org/post/nginx-authorized-download/</link>
      <pubDate>Fri, 11 Jun 2021 11:18:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/nginx-authorized-download/</guid>
      <description>使用Nginx实现授权下载有两种方式，一种是nginx自带 --with-http_secure_link_module，另外一种是lua自定义实现。
方法一 1.1 安装
编译时添加此参数 --with-http_secure_link_module
1.2 配置
server { listen 80; server_name download.test.com; root /data/wwwroot; access_log logs/download.access.log main; location / { secure_link $arg_st,$arg_e; secure_link_md5 FIJaVSEV23$uri$arg_e; if ($secure_link = &amp;#34;&amp;#34;) { return 403; } if ($secure_link = &amp;#34;0&amp;#34;) { return 410; } } } 1.3 使用
# shell脚本示例如下 secret=&amp;#34;FIJaVSEV23&amp;#34; # 见前面secure_link_md5配置 uri=&amp;#34;/待下载文件路径&amp;#34; datetime=$(date -d&amp;#39;1day&amp;#39; +&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;) etime=$(date +%s -d&amp;#34;${datetime}&amp;#34;) token=$(echo -n &amp;#34;${secret}${uri}${etime}&amp;#34; | openssl md5 -binary | openssl base64 | tr +/ -_ | tr -d =) # 下载链接 dlurl=&amp;#34;dowload.</description>
    </item>
    
    <item>
      <title>lua实现微信机器人</title>
      <link>https://ops.m114.org/post/nginx-wechat-ops/</link>
      <pubDate>Fri, 11 Jun 2021 10:08:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/nginx-wechat-ops/</guid>
      <description>使用企业微信调整值班人员信息，示例为联系人tag调整，可以自定义任何想实现功能。
环境  CentOS 7 Nginx  lua-nginx-module lua-resty-http lua实现微信加密库 xml2lua ≤ v1.4-5   依赖服务  企业微信    配置 对应nginx配置
server { listen 443 ssl http2; ssl_certificate test.crt; ssl_certificate_key test.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; ssl_session_timeout 1d; ssl_session_cache shared:SSL:20m; add_header Strict-Transport-Security max-age=31536000; server_name wx-ops.test.com; access_log logs/wechat-ops.access.log main; error_log logs/wechat-ops.info; location /api/ { resolver local=on ipv6=off; resolver_timeout 2s; lua_ssl_verify_depth 1; lua_ssl_trusted_certificate /etc/pki/tls/certs/ca-bundle.crt; content_by_lua_file lua/wechat-ops.lua; } } wechat_ops.</description>
    </item>
    
    <item>
      <title>lua发布消息至RocketMQ解耦</title>
      <link>https://ops.m114.org/post/nginx-use-mq/</link>
      <pubDate>Thu, 03 Jun 2021 15:08:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/nginx-use-mq/</guid>
      <description>广告点击回传数据入消息队列，避免后端处理不过来，先存入消息队列削峰。
环境  CentOS 7 Nginx  lua-nginx-module lua-resty-core lua-resty-http   依赖服务  阿里云RocketMQ    配置 对应nginx location配置
location / { access_by_lua_file lua/mq/mq.lua; } custom/mq.lua
return { AKId = &amp;#34;xxx&amp;#34;, -- RocketMQ的AccessKeyId AKSecret = &amp;#34;xxx&amp;#34;, -- RocketMQ的AccessKeySecret topic_name = &amp;#34;xxx&amp;#34;, -- RocketMQ的topic instance_id = &amp;#34;xxx&amp;#34; -- RocketMQ的instance_id } mq.lua
local require = require local ngx = ngx local config = require(&amp;#34;custom.mq.config&amp;#34;) local http = require &amp;#34;resty.http&amp;#34; local cjson = require &amp;#34;cjson.</description>
    </item>
    
    <item>
      <title>使用动态 DNS 来完成 HTTP 请求</title>
      <link>https://ops.m114.org/post/dynamic-http-proxy/</link>
      <pubDate>Thu, 03 Jun 2021 14:38:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/dynamic-http-proxy/</guid>
      <description>内部访问外部http请求，通过拦截内部请求至此统一访问外部业务。
环境  CentOS 7 Nginx  lua-nginx-module lua-resty-dns lua-resty-lock lua-resty-http    配置 对应nginx配置
lua_shared_dict dns_cache 5m; lua_shared_dict my_locks 1m; server { listen 80; server_name *.test.com; access_log logs/dyn_http.access.log default; location / { content_by_lua_file &amp;#39;lua/dyn_http.lua&amp;#39;; } } dyn_http.lua
local require = require local ngx = ngx local resolver = require &amp;#34;resty.dns.resolver&amp;#34; local resty_lock = require &amp;#34;resty.lock&amp;#34; local http = require &amp;#34;resty.http&amp;#34; local cache = ngx.shared.dns_cache local function fail(msg, err) ngx.</description>
    </item>
    
    <item>
      <title>Nginx实现ip查询服务</title>
      <link>https://ops.m114.org/post/nginx-ipip-service/</link>
      <pubDate>Thu, 03 Jun 2021 13:08:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/nginx-ipip-service/</guid>
      <description>实现内部IP查询服务
 查询当前公网IP 查询当前公网IP地理信息，支持IPv4/IPv6 查询指定IP的地理信息，支持IPv4/IPv6  环境  CentOS 7 Nginx  lua-nginx-module lua-resty-ipmatcher lua-resty-ip2region lua-resty-maxminddb   IP库  ip2region ipv4库 maxminddb 免费ipv6库    配置 lua_shared_dict ip_data 10m; server { server_name ip.test.com; access_log logs/ip.access.log main buffer=32k flush=10s; error_log logs/ip.error.log; location / { default_type &amp;#39;text/plain&amp;#39;; access_by_lua_block { local remote_addr = ngx.var.remote_addr ngx.print(remote_addr) } } location = /ip { default_type application/json; content_by_lua_block { local require = require local ngx = ngx local cjson = require &amp;#34;cjson.</description>
    </item>
    
    <item>
      <title>Gogs/Gitea webhook支持</title>
      <link>https://ops.m114.org/post/gitea-webhook/</link>
      <pubDate>Thu, 03 Jun 2021 10:08:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/gitea-webhook/</guid>
      <description>实现需求为git提交后，自动同步至webhook所在机器的指定目录。也可以支持github的webhook，也能根据不同条件触发不同的webhook，如CI/CD。
环境  CentOS 7 Nginx  ngx_lua lua-resty-shell lua-resty-hmac    配置 对应nginx location配置
location = /webhook/deploy { content_by_lua_file &amp;#39;lua/webhook/deploy.lua&amp;#39;; } deploy.lua
-- Gogs Version: &amp;gt;= v0.10 local require = require local ngx = ngx local cjson = require(&amp;#34;cjson.safe&amp;#34;) local shell = require(&amp;#34;resty.shell&amp;#34;) local hmac = require(&amp;#34;resty.hmac&amp;#34;) local json_encode = cjson.encode local json_decode = cjson.decode -- deploy config local config = { timeout = 30 * 1000, -- 30s socket = &amp;#34;unix:/data/nginx/utils/shell.</description>
    </item>
    
    <item>
      <title>使用Nginx做SNI反向代理</title>
      <link>https://ops.m114.org/post/nginx-sniproxy/</link>
      <pubDate>Wed, 02 Jun 2021 10:18:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/nginx-sniproxy/</guid>
      <description>从 Nginx 1.11.5 版本开始支持用做 SNI 反代，使用 Nginx 做 SNI 反代比用 SNI Proxy 配置起来更简单、更稳定。Nginx stream流程处理见官方文档，此功能可用来加速国外https业务，如苹果订单确认接口。
安装 编译时添加如下参数
 &amp;ndash;with-stream &amp;ndash;with-stream_ssl_preread_module &amp;ndash;with-stream_ssl_module
 配置 基础版
stream { server { listen 443; ssl_preread on; resolver local=on ipv6=off valid=60s; # local=on需要OpenResty补丁 proxy_pass $ssl_preread_server_name:$server_port; } } 优化版
 解决原有无法过滤域名的风险  log_format proxy &amp;#39;$remote_addr [$time_local] $sniproxy_upstream &amp;#39; &amp;#39;$protocol $status $bytes_sent $bytes_received &amp;#39; &amp;#39;$session_time &amp;#34;$upstream_addr&amp;#34; &amp;#39; &amp;#39;&amp;#34;$upstream_bytes_sent&amp;#34; &amp;#34;$upstream_bytes_received&amp;#34; &amp;#34;$upstream_connect_time&amp;#34;&amp;#39;; init_by_lua_block { local sni = require(&amp;#34;resty.sniproxy&amp;#34;) sni.rules = { {&amp;#34;buy.</description>
    </item>
    
    <item>
      <title>Nginx支持WebP</title>
      <link>https://ops.m114.org/post/nginx-support-webp/</link>
      <pubDate>Wed, 02 Jun 2021 10:08:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/nginx-support-webp/</guid>
      <description>WebP格式，Google开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。国外的有 Google（自家的东西肯定要用啦，Chrome Store 甚至已全站使用 WebP）、Facebook 和 ebay，国内的有淘宝、腾讯和美团等。
客户端支持情况:
 Google Chrome 23 起开始支持 WebP（最初发布于2012年11月） Google 的安卓浏览器从 4.2 版本起开始官方支持 WebP（最初发布于2012年11月），4 版本起开始部分支持 Google Chrome安卓版从 Chrome 50 起开始支持 Webp Opera 12.1 开始支持 WebP（最初发布于2012年11月） Edge 18 开始支持 (发布于2018年10月) Firefox 65 支持 (发布于2019年1月)  nginx无缝切换至WebP思路就是：用户访问一张图片(主要为png/jpg格式)，nginx收到请求判断浏览器是否支持WebP，如果支持则返回WebP，不支持则返回原图，达到减少带宽资源的目的。
环境  CentOS 7 libwebp-1.2.0 Nginx  ngx_lua lua-resty-shell    安装部署 cwebp依赖lib
yum -y install libGL libX11 libXi 配置 mime.types新增webp格式支持
image/webp webp; 图片对应nginx location配置
location ~ ^/(images|static)/ { rewrite_by_lua_file &amp;#34;/data/nginx/lua/webp.</description>
    </item>
    
    <item>
      <title>本人OpenResty实践集合</title>
      <link>https://ops.m114.org/post/openresty-case/</link>
      <pubDate>Tue, 01 Jun 2021 10:08:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/openresty-case/</guid>
      <description> 优化  支持Brotli Upstream主动健康检查 动态证书 OCSP缓存 ssl分布式session mTLS支持   命令行执行  Nginx支持WebP gogs/gitea webhook   灰度发布  基于IP（动态IP） 自定义变量   微信机器人 安全相关  授权下载 简易CC防护 Gitea通过飞书SSO认证 安全token 防止SNI信息泄露   API服务  IP查询服务 MQ解耦，对接阿里云RocketMQ 对接Kafka 对接Pulsar   缓存服务  主动缓存 SDK缓存   特权进程实践  ipsec操作   代理相关  http代理 SNI代理    </description>
    </item>
    
  </channel>
</rss>

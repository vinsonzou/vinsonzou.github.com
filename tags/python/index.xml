<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on ops</title>
    <link>https://ops.m114.org/tags/python/index.xml</link>
    <description>Recent content in Python on ops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2014-2018. All rights reserved.</copyright>
    <atom:link href="https://ops.m114.org/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python的while 1跟while True到底有什么区别?</title>
      <link>https://ops.m114.org/post/python-while-1-vs-for-whiletrue/</link>
      <pubDate>Wed, 23 Jan 2019 17:46:06 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/python-while-1-vs-for-whiletrue/</guid>
      <description>&lt;p&gt;定义两个方法,分别使用while循环&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def t1():
    while 1:
        pass

def t2():
    while True:
        pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;单从功能上说,两种无任何区别,那么,来看看字节码上的区别:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Python 2.x&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import dis  #载入反编译模块,Python内置的

dis.dis(t1) #对应的是while 1,下面是输出
  2           0 SETUP_LOOP               3 (to 6)

  3     &amp;gt;&amp;gt;    3 JUMP_ABSOLUTE            3
        &amp;gt;&amp;gt;    6 LOAD_CONST               0 (None)
              9 RETURN_VALUE

dis.dis(t2) #对应的是while True,下面是输出
  2           0 SETUP_LOOP              10 (to 13)
        &amp;gt;&amp;gt;    3 LOAD_GLOBAL              0 (True)
              6 POP_JUMP_IF_FALSE       12

  3           9 JUMP_ABSOLUTE            3
        &amp;gt;&amp;gt;   12 POP_BLOCK
        &amp;gt;&amp;gt;   13 LOAD_CONST               0 (None)
             16 RETURN_VALUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很明显, while 1的字节码只有while True的一半. 为什么呢? 因为Python2.x中True不是关键字,只是一个全局变量而已&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Python 3.x&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; dis.dis(t1)
  2           0 SETUP_LOOP               4 (to 6)

  3     &amp;gt;&amp;gt;    2 JUMP_ABSOLUTE            2
              4 POP_BLOCK
        &amp;gt;&amp;gt;    6 LOAD_CONST               0 (None)
              8 RETURN_VALUE
&amp;gt;&amp;gt;&amp;gt; dis.dis(t2)
  2           0 SETUP_LOOP               4 (to 6)

  3     &amp;gt;&amp;gt;    2 JUMP_ABSOLUTE            2
              4 POP_BLOCK
        &amp;gt;&amp;gt;    6 LOAD_CONST               0 (None)
              8 RETURN_VALUE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在python 3.x中，while 1和while True无任何区别。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在Python 2.x中，True不是关键字，而是在bool类型中定义为1的&lt;a href=&#34;http://docs.python.org/library/constants.html#True&#34;&gt;built-in global constant&lt;/a&gt;。因此，解释器仍然必须加载True的内容。换句话说，True是可重新分配的。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Python 2.7.15 (default, Jan 12 2019, 21:07:57)
[GCC 4.2.1 Compatible Apple LLVM 10.0.0 (clang-1000.11.45.5)] on darwin
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; True = 4
&amp;gt;&amp;gt;&amp;gt; True
4
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;在Python 3.x中，True也是&lt;a href=&#34;http://docs.python.org/py3k/reference/lexical_analysis.html#keywords&#34;&gt;关键字&lt;/a&gt;了。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Python 3.7.0 (default, Jun 29 2018, 20:13:13)
[Clang 9.1.0 (clang-902.0.39.2)] on darwin
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; True = 4
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1
SyntaxError: can&#39;t assign to keyword
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/3815359/while-1-vs-for-whiletrue-why-is-there-a-difference&#34;&gt;https://stackoverflow.com/questions/3815359/while-1-vs-for-whiletrue-why-is-there-a-difference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python数据库连接池实例--PooledDB</title>
      <link>https://ops.m114.org/post/python-mysql-PooledDB/</link>
      <pubDate>Tue, 16 Oct 2018 16:27:12 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/python-mysql-PooledDB/</guid>
      <description>&lt;p&gt;&lt;strong&gt;不用连接池的MySQL连接方法&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import MySQLdb
conn= MySQLdb.connect(host=&#39;127.0.0.1&#39;,user=&#39;root&#39;,passwd=&#39;password&#39;,db=&#39;DB_test&#39;,port=3306)
cur=conn.cursor()
SQL=&amp;quot;select * from table_test&amp;quot;
cur.execute(SQL)
r=cur.fetchall()
cur.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;用连接池后的连接方法&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import MySQLdb
from DBUtils.PooledDB import PooledDB
pool = PooledDB(MySQLdb,5,host=&#39;127.0.0.1&#39;,user=&#39;root&#39;,passwd=&#39;password&#39;,db=&#39;DB_test&#39;,port=3306)    #5为连接池里的最少连接数

conn = pool.connection()  #以后每次需要数据库连接就是用connection()函数获取连接就好了
cur=conn.cursor()
SQL=&amp;quot;select * from table_test&amp;quot;
cur.execute(SQL)
r=cur.fetchall()
cur.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;PooledDB的参数&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mincached: 最少的空闲连接数，如果空闲连接数小于这个数，pool会创建一个新的连接&lt;/li&gt;
&lt;li&gt;maxcached: 最大的空闲连接数，如果空闲连接数大于这个数，pool会关闭空闲连接&lt;/li&gt;
&lt;li&gt;maxconnections: 最大的连接数，&lt;/li&gt;
&lt;li&gt;blocking: 当连接数达到最大的连接数时，在请求连接的时候，如果这个值是True，请求连接的程序会一直等待，直到当前连接数小于最大连接数，如果这个值是False，会报错，&lt;/li&gt;
&lt;li&gt;maxshared: 当连接数达到这个数，新请求的连接会分享已经分配出去的连接&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;连接池对性能的提升表现在&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在程序创建连接的时候，可以从一个空闲的连接中获取，不需要重新初始化连接，提升获取连接的速度&lt;/li&gt;
&lt;li&gt;关闭连接的时候，把连接放回连接池，而不是真正的关闭，所以可以减少频繁地打开和关闭连接&lt;/li&gt;
&lt;li&gt;避免mysql连接数耗尽&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DBUtils下载地址：&lt;a href=&#34;https://pypi.python.org/pypi/DBUtils/&#34;&gt;https://pypi.python.org/pypi/DBUtils/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python版本号比较</title>
      <link>https://ops.m114.org/post/python-version-cmp/</link>
      <pubDate>Sun, 23 Jul 2017 16:13:10 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/python-version-cmp/</guid>
      <description>

&lt;h2 id=&#34;第一种比较方法-strictversion&#34;&gt;第一种比较方法(StrictVersion)&lt;/h2&gt;

&lt;p&gt;StrictVersion是由.将一串带有预发布标签的数字分隔为两个或三个部分的格式，预发布标签的字母只能是a或者b加数字版本号，而且只能在最末尾。预发布a版本低于b版本，并且预发布版本永远小于正式发布版本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;合法格式:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.4       0.4.0  (相同版本)
0.4.1
0.5a1     (预发布版本a1，小于0.5，即0.5版本更新)
0.5b3
0.5
0.9.6
1.0
1.0.4a3
1.0.4b1
1.0.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;非法格式:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1           没有.分隔，需要分隔为2-3部分
2.7.2.2     被分隔成了4个部分
1.3.a4      预发布版本号应该在数字后面
1.3pl1      预发布版本号字母标签只能是a或者b
1.3B1       预发布版本号字母标签只能是a或者b
1.3c        预发布版本号字母标签后必须加数字版本号
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;版本比较&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In [1]: from distutils.version import StrictVersion

In [2]: StrictVersion(&#39;1.2a3&#39;) &amp;lt; StrictVersion(&#39;1.2b1&#39;)
Out[2]: True

In [3]: StrictVersion(&#39;1.2b1&#39;) &amp;lt; StrictVersion(&#39;1.2&#39;)
Out[3]: True

In [4]: StrictVersion(&#39;1.2&#39;) &amp;lt; StrictVersion(&#39;1.2.1&#39;)
Out[4]: True

In [5]: StrictVersion(&#39;1.2&#39;) == StrictVersion(&#39;1.2.0&#39;)
Out[5]: True

In [6]: StrictVersion(&#39;1.2.11&#39;) &amp;lt; StrictVersion(&#39;1.11&#39;)
Out[6]: True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;第二种比较方法-looseversion&#34;&gt;第二种比较方法(LooseVersion)&lt;/h2&gt;

&lt;p&gt;LooseVersion格式要求和StrictVersion不同，或者说它并没有任何规定的格式。由一系列数字,相隔时间或字母的字符串组成，并没有一个严格的格式。在进行比较的时候按照数字大小，字符串按字典顺序比较。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;合法格式&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.5.1
1.5.2b2
161
3.10a
8.02
3.4j
1996.07.12
3.2.pl0
3.1.1.6
2g6
11g
0.960923
2.2beta29
1.13++
5.5.kw
2.0b1pl0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;非法格式&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;并没有哟
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;格式比较&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In [1]: from distutils.version import StrictVersion

In [2]: LooseVersion(&#39;1.6.0x&#39;) &amp;lt; LooseVersion(&#39;1.20.0x&#39;)
Out[2]: True

In [3]: LooseVersion(&#39;2.6.0x&#39;) &amp;lt; LooseVersion(&#39;1.20.0x&#39;)
Out[3]: False

In [4]: LooseVersion(&#39;1.20.0x&#39;) &amp;lt; LooseVersion(&#39;1.20.0z&#39;)
Out[4]: True

In [5]: LooseVersion(&#39;1&#39;) &amp;lt; LooseVersion(&#39;a&#39;)
Out[5]: True 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
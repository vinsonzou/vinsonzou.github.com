<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - cloudSky's 小站</title><link>https://ops.m114.org/posts/</link><description>所有文章 | cloudSky's 小站</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 22 Jan 2022 15:20:03 +0800</lastBuildDate><atom:link href="https://ops.m114.org/posts/" rel="self" type="application/rss+xml"/><item><title>使用lego申请Let's Encrypt通配符证书</title><link>https://ops.m114.org/post/use-lets-encrypt-with-lego/</link><pubDate>Sat, 22 Jan 2022 15:20:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/use-lets-encrypt-with-lego/</guid><description>当前使用Let&amp;rsquo;s Encrypt颁发的证书，原先使用python的certbot，最近发现有个go版更简单无环境依赖的lego，</description></item><item><title>[Go] 怎么正确实现枚举？答案藏着官方的源码里</title><link>https://ops.m114.org/post/go-enum-demo/</link><pubDate>Tue, 18 Jan 2022 10:34:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-enum-demo/</guid><description>后来这两年主要在用Go做项目，我发现相似的问题 Go 里也存在，但是 Go 并没有提供枚举类型，那怎么做到进行状态值的正确限制呢？如果还是用 int 型的常量肯</description></item><item><title>nginx 下载文件重命名</title><link>https://ops.m114.org/post/nginx-download-file-rename/</link><pubDate>Thu, 13 Jan 2022 13:40:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/nginx-download-file-rename/</guid><description>当前Nginx配置 location /download/ { if ($arg_file) { add_header Content-Disposition &amp;quot;attachment;filename*=utf-8'zh_cn'$arg_file&amp;quot;; } } Chrome、Firefox正常，但Safari下载文件名为当前域名 调整后Nginx配置 location /download/ { if ($arg_file) {</description></item><item><title>[Go] 使用gin+websocket实现日志实时输出</title><link>https://ops.m114.org/post/go-gin-websocket/</link><pubDate>Fri, 07 Jan 2022 15:48:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-gin-websocket/</guid><description>背景 由于工作需要，在web端执行相关的部署操作，能够在页面实时展示部署任务的实时日志信息，使用到websocket来实现。 websocket</description></item><item><title>[Go] 实时监控日志文件的包tail</title><link>https://ops.m114.org/post/golang-tail/</link><pubDate>Fri, 07 Jan 2022 09:48:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/golang-tail/</guid><description><![CDATA[在linux中有一个tail命令，tail -f 可以实时的监控文件新增加的内容，如果用代码实现这个逻辑，可以使用这个包 go get github.com/hpcloud/tail 示例代码 package main import ( &#34;fmt&#34; &#34;github.com/hpcloud/tail&#34;]]></description></item><item><title>Windows下cmd运行go，出现假死现象，已解决</title><link>https://ops.m114.org/post/fix-windows-cmd-hang/</link><pubDate>Tue, 14 Dec 2021 13:50:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/fix-windows-cmd-hang/</guid><description>最近遇到一个很尴尬的现象，现象如下: 在windows上部署了一个go web应用，运行一段时间项目就假死一样，telnet端口是通的，但调用接</description></item><item><title>lua-resty-openssl module not found</title><link>https://ops.m114.org/post/lua-resty-openssl-module-not-found/</link><pubDate>Tue, 07 Dec 2021 20:08:13 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/lua-resty-openssl-module-not-found/</guid><description>环境 OS: CentOS 8.4 OpenResty: 1.19.9.1(手动编译) OpenResty prefix: /app/nginx lua_package_path &amp;quot;$prefix/lualib/?.lua;;&amp;quot;; 报错如下 2021/12/07 18:56:11 [error] 2383822#0: *1 lua entry thread aborted: runtime error: /app/nginx//lualib/resty/openssl/pkey.lua:13: module 'resty.openssl.include.x509' not found: no field package.preload['resty.openssl.include.x509'] no file '/app/nginx//lualib/resty/openssl/include/x509.lua' no file './resty/openssl/include/x509.lua' no file '/app/nginx/luajit/share/luajit-2.1.0-beta3/resty/openssl/include/x509.lua' no file '/usr/local/share/lua/5.1/resty/openssl/include/x509.lua' no file '/usr/local/share/lua/5.1/resty/openssl/include/x509/init.lua' no file '/app/nginx/luajit/share/lua/5.1/resty/openssl/include/x509.lua' no file '/app/nginx/luajit/share/lua/5.1/resty/openssl/include/x509/init.lua' 其</description></item><item><title>Alibaba Cloud Linux 3编译wireguard模块</title><link>https://ops.m114.org/post/aliyun-linux-3-build-wireguard-module/</link><pubDate>Fri, 22 Oct 2021 16:01:09 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/aliyun-linux-3-build-wireguard-module/</guid><description>因wireguard已经合并至5.6内核中，刚好Alibaba Cloud Linux 3是5.10内核，结果测试下来没有wireguard模块， 因是CentOS</description></item><item><title>Golang中uint、int, int8, int16, int32, int64区别</title><link>https://ops.m114.org/post/go-int-vs-uint/</link><pubDate>Wed, 20 Oct 2021 16:47:09 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-int-vs-uint/</guid><description>Golang各种数值占据的大小 int 类型大小为 8 字节 int8 类型大小为 1 字节 int16 类型大小为 2 字节 int32 类型大小为 4 字节 int64 类型大小为 8 字节 go语言中的int的</description></item><item><title>Hugo使用Github Action自动部署到Github Pages</title><link>https://ops.m114.org/post/deploy-to-ghpages-with-github-action/</link><pubDate>Thu, 14 Oct 2021 16:35:08 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/deploy-to-ghpages-with-github-action/</guid><description>目的 hugo手动部署到github pages流程: 使用hugo生成静态网页 将静态网页push到建好的github pages repo中，一般是&amp;lt;</description></item></channel></rss>
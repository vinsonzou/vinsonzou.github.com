<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ops</title>
    <link>https://ops.m114.org/index.xml</link>
    <description>Recent content on ops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2014-2018. All rights reserved.</copyright>
    <lastBuildDate>Tue, 15 Jan 2019 17:27:22 +0800</lastBuildDate>
    <atom:link href="https://ops.m114.org/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>libvirt 4.5 virModuleLoadFile:53</title>
      <link>https://ops.m114.org/post/libvirt-4.5-virModuleLoadFile:53/</link>
      <pubDate>Tue, 15 Jan 2019 17:27:22 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/libvirt-4.5-virModuleLoadFile:53/</guid>
      <description>&lt;p&gt;CentOS 7.5.1804的libvirt从3.9升级至4.5时，无法启动，报错如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;error : virModuleLoadFile:53 : internal error: Failed to load module &amp;lsquo;/usr/lib64/libvirt/storage-backend/libvirt_storage_backend_rbd.so&amp;rsquo;: /usr/lib64/libvirt/storage-backend/libvirt_storage_backend_rbd.so: undefined symbol: rbd_diff_iterate2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;详细报错如下:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# libvirtd -v
2019-01-15 08:56:53.433+0000: 34181: info : libvirt version: 4.5.0, package: 10.el7_6.3 (CentOS BuildSystem &amp;lt;http://bugs.centos.org&amp;gt;, 2018-11-28-20:51:39, x86-01.bsys.centos.org)
2019-01-15 08:56:53.433+0000: 34181: info : hostname: localhost.localdomain
2019-01-15 08:56:53.433+0000: 34181: info : virObjectNew:248 : OBJECT_NEW: obj=0x56166f5da690 classname=virAccessManager
2019-01-15 08:56:53.434+0000: 34181: info : virObjectNew:248 : OBJECT_NEW: obj=0x56166f5cbfe0 classname=virAccessManager
2019-01-15 08:56:53.434+0000: 34181: info : virObjectRef:382 : OBJECT_REF: obj=0x56166f5da690
2019-01-15 08:56:53.434+0000: 34181: info : virObjectUnref:344 : OBJECT_UNREF: obj=0x56166f5da690
2019-01-15 08:56:53.434+0000: 34181: info : virObjectNew:248 : OBJECT_NEW: obj=0x56166f5cc470 classname=virNetDaemon
2019-01-15 08:56:53.434+0000: 34181: info : virEventPollAddHandle:140 : EVENT_POLL_ADD_HANDLE: watch=1 fd=5 events=1 cb=0x7f5e248272d0 opaque=(nil) ff=(nil)
2019-01-15 08:56:53.434+0000: 34181: info : virObjectNew:248 : OBJECT_NEW: obj=0x56166f5cc7d0 classname=virNetServer
2019-01-15 08:56:53.434+0000: 34181: info : virObjectRef:382 : OBJECT_REF: obj=0x56166f5cc7d0
2019-01-15 08:56:53.462+0000: 34181: error : virModuleLoadFile:53 : internal error: Failed to load module &#39;/usr/lib64/libvirt/storage-backend/libvirt_storage_backend_rbd.so&#39;: /usr/lib64/libvirt/storage-backend/libvirt_storage_backend_rbd.so: undefined symbol: rbd_diff_iterate2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;解决方法:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;libvirt_storage_backend_rbd.so&lt;/code&gt;应该是连接ceph块设备（rbd）的一个模块，这里暂时不用连接ceph，最简单粗暴的做法就是移除该模块，重启libvirtd。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# cd /usr/lib64/libvirt/storage-backend
[root@localhost storage-backend]# mv libvirt_storage_backend_rbd.so libvirt_storage_backend_rbd.so.bak
[root@localhost ~]# systemctl restart libvirtd
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python数据库连接池实例--PooledDB</title>
      <link>https://ops.m114.org/post/python-mysql-PooledDB/</link>
      <pubDate>Tue, 16 Oct 2018 16:27:12 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/python-mysql-PooledDB/</guid>
      <description>&lt;p&gt;&lt;strong&gt;不用连接池的MySQL连接方法&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import MySQLdb
conn= MySQLdb.connect(host=&#39;127.0.0.1&#39;,user=&#39;root&#39;,passwd=&#39;password&#39;,db=&#39;DB_test&#39;,port=3306)
cur=conn.cursor()
SQL=&amp;quot;select * from table_test&amp;quot;
cur.execute(SQL)
r=cur.fetchall()
cur.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;用连接池后的连接方法&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import MySQLdb
from DBUtils.PooledDB import PooledDB
pool = PooledDB(MySQLdb,5,host=&#39;127.0.0.1&#39;,user=&#39;root&#39;,passwd=&#39;password&#39;,db=&#39;DB_test&#39;,port=3306)    #5为连接池里的最少连接数

conn = pool.connection()  #以后每次需要数据库连接就是用connection()函数获取连接就好了
cur=conn.cursor()
SQL=&amp;quot;select * from table_test&amp;quot;
cur.execute(SQL)
r=cur.fetchall()
cur.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;PooledDB的参数&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mincached: 最少的空闲连接数，如果空闲连接数小于这个数，pool会创建一个新的连接&lt;/li&gt;
&lt;li&gt;maxcached: 最大的空闲连接数，如果空闲连接数大于这个数，pool会关闭空闲连接&lt;/li&gt;
&lt;li&gt;maxconnections: 最大的连接数，&lt;/li&gt;
&lt;li&gt;blocking: 当连接数达到最大的连接数时，在请求连接的时候，如果这个值是True，请求连接的程序会一直等待，直到当前连接数小于最大连接数，如果这个值是False，会报错，&lt;/li&gt;
&lt;li&gt;maxshared: 当连接数达到这个数，新请求的连接会分享已经分配出去的连接&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;连接池对性能的提升表现在&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在程序创建连接的时候，可以从一个空闲的连接中获取，不需要重新初始化连接，提升获取连接的速度&lt;/li&gt;
&lt;li&gt;关闭连接的时候，把连接放回连接池，而不是真正的关闭，所以可以减少频繁地打开和关闭连接&lt;/li&gt;
&lt;li&gt;避免mysql连接数耗尽&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DBUtils下载地址：&lt;a href=&#34;https://pypi.python.org/pypi/DBUtils/&#34;&gt;https://pypi.python.org/pypi/DBUtils/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用curl请求https时指定IP</title>
      <link>https://ops.m114.org/post/request-https-server-in-custom-ip-with-curl/</link>
      <pubDate>Wed, 06 Jun 2018 10:00:00 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/request-https-server-in-custom-ip-with-curl/</guid>
      <description>&lt;p&gt;一般使用curl请求自定义IP地址并且指定HOST的话可以这样。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -H &#39;Host: ops.m114.org&#39; http://127.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是如果你需要请求的地址是HTTPS就不行了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -H &#39;Host: ops.m114.org&#39; https://127.0.0.1/
curl: (51) Unable to communicate securely with peer: requested domain name does not match the server&#39;s certificate.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为IP绝大多数情况下无法通过域名证书验证，还好curl中有&lt;code&gt;--resolv&lt;/code&gt;参数可以让我们方便的指定域名的解析&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# --resolv参数形式
--resolv host:port:address
# 示例
curl --resolv ops.m114.org:443:127.0.0.1 https://ops.m114.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ps:&lt;/p&gt;

&lt;p&gt;小编经常使用的CentOS6的自带curl就不支持此参数，幸运的是CentOS7已经支持。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>go如何编译出更小的执行文件?</title>
      <link>https://ops.m114.org/post/go-build-small-exec/</link>
      <pubDate>Wed, 23 Aug 2017 23:38:09 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/go-build-small-exec/</guid>
      <description>

&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;本地默认编译出的文件总与官方提供的二进制文件大很多，Google之后得知通过编译参数控制还能编译出更小的可执行文件。&lt;/p&gt;

&lt;h1 id=&#34;加-ldflags参数&#34;&gt;加-ldflags参数&lt;/h1&gt;

&lt;p&gt;在程序编译的时候可以加上&lt;code&gt;-ldflags &amp;quot;-s -w&amp;quot;&lt;/code&gt; 参数来优化编译程序, 其实通过去除部分连接和调试等信息来使得编译之后的执行程序更小,具体参数如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-a 强制编译所有依赖包&lt;/li&gt;
&lt;li&gt;-s 去掉符号表信息, panic时候的stack trace就没有任何文件名/行号信息了&lt;/li&gt;
&lt;li&gt;-w 去掉DWARF调试信息，得到的程序就不能用gdb调试了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;测试代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    fmt.Println(&amp;quot;Hello, 世界&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译方式及文件大小对比结果如下&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编译参数&lt;/th&gt;
&lt;th&gt;大小&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;go build(默认)&lt;/td&gt;
&lt;td&gt;1.6M&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;go build -ldflags -s&lt;/td&gt;
&lt;td&gt;1.6M&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;go build -ldflags &amp;ldquo;-s -w&amp;rdquo;&lt;/td&gt;
&lt;td&gt;1.1M&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;go build -ldflags -w&lt;/td&gt;
&lt;td&gt;1.1M&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;测试环境: go 1.8.3 on macOS 10.12.6
不建议s和w同时使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;使用upx&#34;&gt;使用upx&lt;/h1&gt;

&lt;p&gt;上面go build 时加上-ldflags参数得到了比较小的可执行程序，但是还可以通过upx这个开源，绿色，好用的压缩工具进行进一步压缩。&lt;/p&gt;

&lt;p&gt;Mac用户直接brew安装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install upx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;upx使用效果如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2017
UPX 3.94        Markus Oberhumer, Laszlo Molnar &amp;amp; John Reiser   May 12th 2017

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
   1181728 -&amp;gt;    438928   37.14%   macho/amd64   test

Packed 1 file.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到通过upx进一步压缩之后得到的程序只有429K了，压缩比率达到了37.14%.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang之command line flag笔记</title>
      <link>https://ops.m114.org/post/golang-command-line-flags/</link>
      <pubDate>Wed, 16 Aug 2017 23:28:33 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/golang-command-line-flags/</guid>
      <description>&lt;p&gt;&lt;strong&gt;示例代码，仅供参考&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;flag&amp;quot;
)

func main() {
    // golang的flag包的一些基本使用方法

    // 待使用的变量
    var id int
    var name string
    var male bool

    // 是否已经解析
    fmt.Println(&amp;quot;parsed? = &amp;quot;, flag.Parsed())

    // 设置flag参数 (变量指针，参数名，默认值，帮助信息)
    // 也可以用以下带返回值的方法代替，不过他们返回的是指针，比较麻烦点
    // Int(name string, value int, usage string) *int
    // String(name string, value string, usage string) *string
    // Bool(name string, value bool, usage string) *bool
    flag.IntVar(&amp;amp;id, &amp;quot;id&amp;quot;, 123, &amp;quot;help msg for id&amp;quot;)
    flag.StringVar(&amp;amp;name, &amp;quot;name&amp;quot;, &amp;quot;default name&amp;quot;, &amp;quot;help msg for name&amp;quot;)
    flag.BoolVar(&amp;amp;male, &amp;quot;male&amp;quot;, false, &amp;quot;help msg for male&amp;quot;)

    // 解析
    flag.Parse()

    // 是否已经解析
    fmt.Println(&amp;quot;parsed? = &amp;quot;, flag.Parsed())

    // 获取非flag参数
    fmt.Println(&amp;quot;------ Args start ------&amp;quot;)
    for i, v := range flag.Args() {
        fmt.Printf(&amp;quot;arg[%d] = (%s).\n&amp;quot;, i, v)
    }
    fmt.Println(&amp;quot;------ Args end ------&amp;quot;)

    // visit只包含已经设置了的flag
    fmt.Println(&amp;quot;------ visit flag start ------&amp;quot;)
    flag.Visit(func(f *flag.Flag) {
        fmt.Println(f.Name, f.Value, f.Usage, f.DefValue)
    })
    fmt.Println(&amp;quot;------ visit flag end ------&amp;quot;)

    // visitAll只包含所有的flag(包括未设置的)
    fmt.Println(&amp;quot;------ visitAll flag start ------&amp;quot;)
    flag.VisitAll(func(f *flag.Flag) {
        fmt.Println(f.Name, f.Value, f.Usage, f.DefValue)

    })
    fmt.Println(&amp;quot;------ visitAll flag end ------&amp;quot;)

    // flag参数
    fmt.Printf(&amp;quot;id = %d\n&amp;quot;, id)
    fmt.Printf(&amp;quot;name = %s\n&amp;quot;, name)
    fmt.Printf(&amp;quot;male = %t\n&amp;quot;, male)

    // flag参数默认值
    fmt.Println(&amp;quot;------ PrintDefaults start ------&amp;quot;)
    flag.PrintDefaults()
    fmt.Println(&amp;quot;------ PrintDefaults end ------&amp;quot;)

    // 非flag参数个数
    fmt.Printf(&amp;quot;NArg = %d\n&amp;quot;, flag.NArg())
    // 已设置的flag参数个数
    fmt.Printf(&amp;quot;NFlag = %d\n&amp;quot;, flag.NFlag())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;传参数go run&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go run flag_demo.go -id=123 -name=&amp;quot;zhangsan&amp;quot; -male=true p1 p2 p3 p4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;示例输出结果&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parsed? =  false
parsed? =  true
------ Args start ------
arg[0] = (p1).
arg[1] = (p2).
arg[2] = (p3).
arg[3] = (p4).
------ Args end ------
------ visit flag start ------
id 123 help msg for id 123
male true help msg for male false
name zhangsan help msg for name default name
------ visit flag end ------
------ visitAll flag start ------
id 123 help msg for id 123
male true help msg for male false
name zhangsan help msg for name default name
------ visitAll flag end ------
id = 123
name = zhangsan
male = true
------ PrintDefaults start ------
  -id int
    	help msg for id (default 123)
  -male
    	help msg for male
  -name string
    	help msg for name (default &amp;quot;default name&amp;quot;)
------ PrintDefaults end ------
NArg = 4
NFlag = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gobyexample.com/command-line-flags&#34;&gt;https://gobyexample.com/command-line-flags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>analysing java core dump</title>
      <link>https://ops.m114.org/post/analysing-java-core-dump/</link>
      <pubDate>Sun, 23 Jul 2017 16:32:26 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/analysing-java-core-dump/</guid>
      <description>&lt;p&gt;In this post, I will show you how you can debug a Java core file to see what caused your JVM to crash. I will be using a core file I generated in my previous post: &lt;a href=&#34;http://fahdshariff.blogspot.co.uk/2012/08/generating-java-core-dump.html&#34;&gt;Generating a Java Core Dump&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are different ways you can diagnose a JVM crash, listed below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The hs_err_pid log file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When a fatal error occurs in the JVM, it produces an error log file called hs_err_pidXXXX.log, normally in the working directory of the process or in the temporary directory for the operating system. The top of this file contains the cause of the crash and the &amp;ldquo;problematic frame&amp;rdquo;. For example, mine shows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ head hs_err_pid21178.log
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000002b1d00075c, pid=21178, tid=1076017504
#
# JRE version: 6.0_21-b06
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17.0-b16 mixed mode linux-amd64 )
# Problematic frame:
# C  [libnativelib.so+0x75c]  bar+0x10
#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is also a stack trace:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stack: [0x000000004012b000,0x000000004022c000],  sp=0x000000004022aac0,  free space=3fe0000000000000018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libnativelib.so+0x75c]  bar+0x10
C  [libnativelib.so+0x772]  foo+0xe
C  [libnativelib.so+0x78e]  Java_CoreDumper_core+0x1a
j  CoreDumper.core()V+0
j  CoreDumper.main([Ljava/lang/String;)V+7
v  ~StubRoutines::call_stub
V  [libjvm.so+0x3e756d]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The stack trace shows that my java method, CoreDumper.core(), called into JNI and died when the bar function was called in native code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Debugging a Java Core Dump&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In some cases, the JVM may not produce a hs_err_pid file, for example, if the native code abruptly aborts by calling the abort function. In such cases, we need to analyse the core file produced. On my machine, the operating system writes out core files to /var/tmp/cores. You can use the following command to see where your system is configured to write out core files to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /proc/sys/kernel/core_pattern
/var/tmp/cores/%e.%p.%u.core
$ ls /var/tmp/cores
java.21178.146385.core
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few, different ways to look at core dumps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Using gdb&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GNU Debugger (gdb) can examine a core file and work out what the program was doing when it crashed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gdb $JAVA_HOME/bin/java /var/tmp/cores/java.14015.146385.core
(gdb) where
#0  0x0000002a959bd26d in raise () from /lib64/tls/libc.so.6
#1  0x0000002a959bea6e in abort () from /lib64/tls/libc.so.6
#2  0x0000002b1cecf799 in bar () from libnativelib.so
#3  0x0000002b1cecf7a7 in foo () from libnativelib.so
#4  0x0000002b1cecf7c3 in Java_CoreDumper_core () from libnativelib.so
#5  0x0000002a971aac88 in ?? ()
#6  0x0000000040113800 in ?? ()
#7  0x0000002a9719fa42 in ?? ()
#8  0x000000004022ab10 in ?? ()
#9  0x0000002a9a4d5488 in ?? ()
#10 0x000000004022ab70 in ?? ()
#11 0x0000002a9a4d59c8 in ?? ()
#12 0x0000000000000000 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The where command prints the stack frames and shows that the bar function called abort() which caused the crash.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Using jstack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jstack prints stack traces of Java threads for a given core file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jstack -J-d64 $JAVA_HOME/bin/java /var/tmp/cores/java.14015.146385.core
Debugger attached successfully.
Server compiler detected.
JVM version is 17.0-b16
Deadlock Detection:

No deadlocks found.

Thread 16788: (state = BLOCKED)

Thread 16787: (state = BLOCKED)
 - java.lang.Object.wait(long) @bci=0 (Interpreted frame)
 - java.lang.ref.ReferenceQueue.remove(long) @bci=44, line=118 (Interpreted frame)
 - java.lang.ref.ReferenceQueue.remove() @bci=2, line=134 (Interpreted frame)
 - java.lang.ref.Finalizer$FinalizerThread.run() @bci=3, line=159 (Interpreted frame)

Thread 16786: (state = BLOCKED)
 - java.lang.Object.wait(long) @bci=0 (Interpreted frame)
 - java.lang.Object.wait() @bci=2, line=485 (Interpreted frame)
 - java.lang.ref.Reference$ReferenceHandler.run() @bci=46, line=116 (Interpreted frame)

Thread 16780: (state = IN_NATIVE)
 - CoreDumper.core() @bci=0 (Interpreted frame)
 - CoreDumper.main(java.lang.String[]) @bci=7, line=12 (Interpreted frame)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3. Using jmap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jmap examines a core file and prints out shared object memory maps or heap memory details.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jmap -J-d64 $JAVA_HOME/bin/java /var/tmp/cores/java.14015.146385.core
Debugger attached successfully.
Server compiler detected.
JVM version is 17.0-b16
0x0000000040000000      49K     /usr/sunjdk/1.6.0_21/bin/java
0x0000002a9566c000      124K    /lib64/tls/libpthread.so.0
0x0000002a95782000      47K     /usr/sunjdk/1.6.0_21/jre/lib/amd64/jli/libjli.so
0x0000002a9588c000      16K     /lib64/libdl.so.2
0x0000002a9598f000      1593K   /lib64/tls/libc.so.6
0x0000002a95556000      110K    /lib64/ld-linux-x86-64.so.2
0x0000002a95bca000      11443K  /usr/sunjdk/1.6.0_21/jre/lib/amd64/server/libjvm.so
0x0000002a96699000      625K    /lib64/tls/libm.so.6
0x0000002a9681f000      56K     /lib64/tls/librt.so.1
0x0000002a96939000      65K     /usr/sunjdk/1.6.0_21/jre/lib/amd64/libverify.so
0x0000002a96a48000      228K    /usr/sunjdk/1.6.0_21/jre/lib/amd64/libjava.so
0x0000002a96b9e000      109K    /lib64/libnsl.so.1
0x0000002a96cb6000      54K     /usr/sunjdk/1.6.0_21/jre/lib/amd64/native_threads/libhpi.so
0x0000002a96de8000      57K     /lib64/libnss_files.so.2
0x0000002a96ef4000      551K    /lib64/libnss_db.so.2
0x0000002a97086000      89K     /usr/sunjdk/1.6.0_21/jre/lib/amd64/libzip.so
0x0000002b1cecf000      6K      /home/sharfah/tmp/jni/libnativelib.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Useful Links:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://weblogs.java.net/blog/kohsuke/archive/2009/02/crash_course_on.html&#34;&gt;Crash course on JVM crash analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fahdshariff.blogspot.co.uk/2012/08/generating-java-core-dump.html&#34;&gt;Generating a Java Core Dump&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From &lt;a href=&#34;http://fahdshariff.blogspot.co.uk/2012/08/analysing-java-core-dump.html&#34;&gt;http://fahdshariff.blogspot.co.uk/2012/08/analysing-java-core-dump.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Error: 500 OOPS: priv_sock_get_cmd [SOLVED]</title>
      <link>https://ops.m114.org/post/error-500-oops-priv_sock_get_cmd-solved/</link>
      <pubDate>Sun, 23 Jul 2017 16:21:45 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/error-500-oops-priv_sock_get_cmd-solved/</guid>
      <description>

&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;seccomp filter sanboxing with vsftpd 3.0.x&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following error may occur on ftp clients with vsftpd 3.0.x:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;500 OOPS: priv_sock_get_cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is caused by &lt;a href=&#34;http://en.wikipedia.org/wiki/Seccomp&#34;&gt;seccomp filter sanboxing&lt;/a&gt;, which is enabled by default on &lt;code&gt;amd64&lt;/code&gt;. To workaround this issue, disable seccomp filter sanboxing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;seccomp_sandbox=NO&#39; &amp;gt;&amp;gt; vsftpd.conf
service vsftpd restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For further information, refer to &lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=845980&#34;&gt;Red Hat bug #845980&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python版本号比较</title>
      <link>https://ops.m114.org/post/python-version-cmp/</link>
      <pubDate>Sun, 23 Jul 2017 16:13:10 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/python-version-cmp/</guid>
      <description>

&lt;h2 id=&#34;第一种比较方法-strictversion&#34;&gt;第一种比较方法(StrictVersion)&lt;/h2&gt;

&lt;p&gt;StrictVersion是由.将一串带有预发布标签的数字分隔为两个或三个部分的格式，预发布标签的字母只能是a或者b加数字版本号，而且只能在最末尾。预发布a版本低于b版本，并且预发布版本永远小于正式发布版本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;合法格式:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.4       0.4.0  (相同版本)
0.4.1
0.5a1     (预发布版本a1，小于0.5，即0.5版本更新)
0.5b3
0.5
0.9.6
1.0
1.0.4a3
1.0.4b1
1.0.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;非法格式:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1           没有.分隔，需要分隔为2-3部分
2.7.2.2     被分隔成了4个部分
1.3.a4      预发布版本号应该在数字后面
1.3pl1      预发布版本号字母标签只能是a或者b
1.3B1       预发布版本号字母标签只能是a或者b
1.3c        预发布版本号字母标签后必须加数字版本号
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;版本比较&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In [1]: from distutils.version import StrictVersion

In [2]: StrictVersion(&#39;1.2a3&#39;) &amp;lt; StrictVersion(&#39;1.2b1&#39;)
Out[2]: True

In [3]: StrictVersion(&#39;1.2b1&#39;) &amp;lt; StrictVersion(&#39;1.2&#39;)
Out[3]: True

In [4]: StrictVersion(&#39;1.2&#39;) &amp;lt; StrictVersion(&#39;1.2.1&#39;)
Out[4]: True

In [5]: StrictVersion(&#39;1.2&#39;) == StrictVersion(&#39;1.2.0&#39;)
Out[5]: True

In [6]: StrictVersion(&#39;1.2.11&#39;) &amp;lt; StrictVersion(&#39;1.11&#39;)
Out[6]: True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;第二种比较方法-looseversion&#34;&gt;第二种比较方法(LooseVersion)&lt;/h2&gt;

&lt;p&gt;LooseVersion格式要求和StrictVersion不同，或者说它并没有任何规定的格式。由一系列数字,相隔时间或字母的字符串组成，并没有一个严格的格式。在进行比较的时候按照数字大小，字符串按字典顺序比较。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;合法格式&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.5.1
1.5.2b2
161
3.10a
8.02
3.4j
1996.07.12
3.2.pl0
3.1.1.6
2g6
11g
0.960923
2.2beta29
1.13++
5.5.kw
2.0b1pl0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;非法格式&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;并没有哟
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;格式比较&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In [1]: from distutils.version import StrictVersion

In [2]: LooseVersion(&#39;1.6.0x&#39;) &amp;lt; LooseVersion(&#39;1.20.0x&#39;)
Out[2]: True

In [3]: LooseVersion(&#39;2.6.0x&#39;) &amp;lt; LooseVersion(&#39;1.20.0x&#39;)
Out[3]: False

In [4]: LooseVersion(&#39;1.20.0x&#39;) &amp;lt; LooseVersion(&#39;1.20.0z&#39;)
Out[4]: True

In [5]: LooseVersion(&#39;1&#39;) &amp;lt; LooseVersion(&#39;a&#39;)
Out[5]: True 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>golang sync.WaitGroup解决goroutine同步</title>
      <link>https://ops.m114.org/post/sync-WaitGroup/</link>
      <pubDate>Mon, 03 Jul 2017 16:27:12 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/sync-WaitGroup/</guid>
      <description>&lt;p&gt;&lt;strong&gt;go提供了sync包和channel来解决协程同步和通讯。&lt;/strong&gt;新手对channel通道操作起来更容易产生死锁，如果时缓冲的channel还要考虑channel放入和取出数据的速率问题。&lt;/p&gt;

&lt;p&gt;从字面就可以理解，sync.WaitGroup是等待一组协程结束。它实现了一个类似任务队列的结构，你可以向队列中加入任务，任务完成后就把任务从队列中移除，如果队列中的任务没有全部完成，队列就会触发阻塞以阻止程序继续运行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sync.WaitGroup只有3个方法，Add()，Done()，Wait()。&lt;/strong&gt; 其中Done()是Add(-1)的别名。简单的来说，使用Add()添加计数，Done()减掉一个计数，计数不为0, 阻塞Wait()的运行。&lt;/p&gt;

&lt;p&gt;简单示例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main
 
import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;sync&amp;quot;
)
 
var waitgroup sync.WaitGroup
 
func test(shownum int) {
	fmt.Println(shownum)
	waitgroup.Done() //任务完成，将任务队列中的任务数量-1，其实.Done就是.Add(-1)
}
 
func main() {
	for i := 0; i &amp;lt; 10; i++ {
		waitgroup.Add(1) //每创建一个goroutine，就把任务队列中任务的数量+1
		go test(i)
	}
	waitgroup.Wait() //.Wait()这里会发生阻塞，直到队列中所有的任务结束就会解除阻塞
	fmt.Println(&amp;quot;done!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ps: 此文为学习记录，如有错误还请多指教。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tomcat 7.0.76 Invalid character found in the request target</title>
      <link>https://ops.m114.org/post/fix-tomcat-upgrade-error/</link>
      <pubDate>Mon, 27 Mar 2017 13:08:25 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/fix-tomcat-upgrade-error/</guid>
      <description>&lt;p&gt;&lt;strong&gt;故障现象&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;升级tomcat至7.0.76后，GET请求的参数中含有中文时tomcat返回400错误，tomcat错误日志如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java.lang.IllegalArgumentException: Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986
	at org.apache.coyote.http11.InternalNioInputBuffer.parseRequestLine(InternalNioInputBuffer.java:317)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1000)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:637)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1756)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1715)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:662)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;查询&lt;a href=&#34;http://tomcat.apache.org/tomcat-7.0-doc/changelog.html#Tomcat_7.0.73_(violetagg)&#34;&gt;Changelog&lt;/a&gt;得知，tomcat 7.0.73版本添加了&lt;strong&gt;Add additional checks for valid characters to the HTTP request line parsing so invalid request lines are rejected sooner&lt;/strong&gt;导致。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;请求前自行转义&lt;/li&gt;
&lt;li&gt;更换tomcat为较低版本(不过tomcat的这次更改是依据RFC7230 and RFC 3986,在往后的版本,不会移除该特性)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>不重启解决Too Many Connections</title>
      <link>https://ops.m114.org/post/solve-too-many-connections/</link>
      <pubDate>Sat, 07 Jan 2017 19:57:32 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/solve-too-many-connections/</guid>
      <description>&lt;p&gt;当发生Too many connections时，即使是DBA也无法登录到数据库，一般的做法是修改配置文件的max_connections参数，然后重启数据库，这样业务就有几秒钟的中断，对于线上不能中断的数据库就只能采用另外一种极客的方法了，用gdb直接修改mysqld内存中max_connections的值，具体做法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gdb -p $(cat /data/mysql/mysql-server.pid) -ex &amp;quot;set max_connections=3000&amp;quot; -batch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;改进方法如下&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通常有两个参数控制控制最大连接数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;max_connections：该实例允许最大的连接数
max_user_connections：该实例允许每个用户的最大连接数
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每个人要根据自己业务量，设置合适的值，不要盲目设置过大，但也不可设置过小，因为MySQL在连接数上升的情况下性能下降非常厉害，如果需要大量连接，这时可以引入thread_pool，所以我们需要保持一个原则：系统创建的用户（给应用使用用户）数 * max_user_connections &amp;lt; max_connections。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在 OpenResty 中使用正则表达式</title>
      <link>https://ops.m114.org/post/use-regular-expressions-in-OpenResty/</link>
      <pubDate>Sun, 30 Oct 2016 10:48:19 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/use-regular-expressions-in-OpenResty/</guid>
      <description>&lt;p&gt;在 OpenResty 中使用正则表达式，社区中推荐的做法是使用ngx.re api。比如匹配一个字符串是否为 http(s) 的链接，可以这么写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local function is_http_url(s)
    return ngx.re.find(s, [[^https?://[\w-_?.:/+=&amp;amp;#%]+$]])
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;压测一下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local t = os.clock()
for _ = 1, max do
    is_http_url(&amp;quot;http://blog.stackoverflow.com/2016/10/Stack-Overflow-92-Podcast-The-Guerilla-Guide-to-Interviewing/?cb=1&amp;quot;)
end
print(&amp;quot;Time cost: &amp;quot;, os.clock() - t, &amp;quot; s&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果：Time cost: 2.663408 s&lt;/p&gt;

&lt;p&gt;另一种做法是使用 lua 的正则语法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local function is_http_url(s)
    return s:find(&amp;quot;^https?://[%w-_%.%?:/%+=&amp;amp;#%%]+$&amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果：Time cost: 0.652221 s&lt;/p&gt;

&lt;p&gt;呃，怎么前者耗时是后者的四倍？lua 内置的小小状态机实现，居然打败了大名鼎鼎的 PCRE 库！说好的社区推荐呢！&lt;/p&gt;

&lt;p&gt;仔细一瞧，前者的确漏了点东西。ngx.re默认不会缓存正则表达式编译后的结果。一般在其它编程平台上，我们都会先把字符串编译成正则表达式，再用到正则函数中。比如在
Python 里使用 re.compile。所以赶紧补上：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return ngx.re.find(s, [[^https?://[\w-_?.:/+=&amp;amp;#%]+$]], &amp;quot;o&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好，这次性能有了明显提升：Time cost: 0.646518 s&lt;/p&gt;

&lt;p&gt;不错不错，虽然还是跟 lua 的实现不分上下，考虑到 lua 本身的正则支持非常弱（比如连 (foo|bar)
这种形式都不行），而且语法离经叛道，改用 ngx.re 还是挺有必要的。毕竟 PCRE 可是 Perl Compatibility Regex
Expression库，我最喜欢它支持的(?name:pattern)形式的命名捕获功能。&lt;/p&gt;

&lt;p&gt;其实 ngx.re 实现尚未用尽全力呢。开启了 JIT 之后，PCRE 库的性能会更上一层楼：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return ngx.re.find(s, [[^https?://[\w-_?.:/+=&amp;amp;#%]+$]], &amp;quot;jo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果：Time cost: 0.421824 s&lt;/p&gt;

&lt;p&gt;此时，lua 正则已经被甩到后面去了。&lt;/p&gt;

&lt;p&gt;还能更快吗？&lt;/p&gt;

&lt;p&gt;当然，OpenResty 军火库里还有另外一个武器：&lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;resty.core.regex&#39;

local function is_http_url(s)
    return ngx.re.find(s, [[^https?://[\w-_?.:/+=&amp;amp;#%]+$]], &amp;quot;jo&amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果：Time cost: 0.175346 s&lt;/p&gt;

&lt;p&gt;Boom！最终用时是 lua 正则的四分之一。lua 正则已经望尘莫及了。有趣的是，这个结果正好是第一次比较的结果倒过来。
实话说，这个结果在我的意料之外。resty.core.regex 版本的 ngx.re api，跟默认版本的区别在于对入参和出参的处理是在 lua
代码里完成的，另外调用 C 函数部分采用的是 ffi 而非传统的 C binding。但为什么会这么快？luajit 是否对 ffi 有 jit 优化？&lt;/p&gt;

&lt;p&gt;需要注明一下，resty.core.regex并非银弹。在我们自己的应用上，我尝试引入resty.core.regex，发现对性能无可见的提升。当然，我们的应用的功能不是匹配
url，正则处理亦非瓶颈。不过 resty.core.regex 对自己的项目是否有效，还需要诸君自己测试一番。&lt;/p&gt;

&lt;p&gt;总结&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果在 OpenResty 项目中需要使用正则表达式，请使用 ngx.re api，并开启 jo 选项。&lt;/li&gt;
&lt;li&gt;resty.core.regex 值得一试。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;原文：&lt;a href=&#34;https://segmentfault.com/a/1190000007298100&#34;&gt;https://segmentfault.com/a/1190000007298100&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[python]统计列表中重复项的出现次数</title>
      <link>https://ops.m114.org/post/python-count-duplicate-values-of-list/</link>
      <pubDate>Sun, 30 Oct 2016 10:27:24 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/python-count-duplicate-values-of-list/</guid>
      <description>&lt;p&gt;列表项由数字、字符串组成，统计重复项&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from collections import defaultdict
&amp;gt;&amp;gt;&amp;gt; d = defaultdict(int)
&amp;gt;&amp;gt;&amp;gt; for x in [1, 2, 3, 1, 2, 3, 1]:
...     d[x] += 1
...
&amp;gt;&amp;gt;&amp;gt; dict(d)
{1: 3, 2: 2, 3: 2}
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; c = defaultdict(int)
&amp;gt;&amp;gt;&amp;gt; for y in [&#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;c&#39;, &#39;c&#39;]:
...     c[y] += 1
...
&amp;gt;&amp;gt;&amp;gt; dict(c)
{&#39;a&#39;: 2, &#39;c&#39;: 2, &#39;b&#39;: 1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列表项由字典组成，统计某一键值的重复数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; e = defaultdict(int)
&amp;gt;&amp;gt;&amp;gt; for x in [{&#39;a&#39;: 1, &#39;b&#39;: 1}, {&#39;a&#39;: 2, &#39;b&#39;:1}, {&#39;a&#39;: 1, &#39;c&#39;: 3}]:
...     e[x[&#39;a&#39;]] += 1
...
&amp;gt;&amp;gt;&amp;gt; dict(e)   # &#39;a&#39;: 1 出现2次，&#39;a&#39;: 2 出现1次
{1: 2, 2: 1}
&amp;gt;&amp;gt;&amp;gt; e.items()
[(1, 2), (2, 1)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/14374568/counting-duplicate-words-in-python-the-fastest-way&#34;&gt;dictionary - counting duplicate words in python the fastest way - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ops.m114.org/about/</link>
      <pubDate>Sat, 22 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ops.m114.org/about/</guid>
      <description>

&lt;h2 id=&#34;收藏站点&#34;&gt;收藏站点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://moonbingbing.gitbooks.io/openresty-best-practices/content/index.html&#34;&gt;OpenResty最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://imququ.com&#34;&gt;Jerry Qu HTTPS最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/firehol/blocklist-ipsets&#34;&gt;IP黑名单&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;python常用模块&#34;&gt;Python常用模块&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kennethreitz/requests&#34;&gt;requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kennethreitz/requests-html&#34;&gt;requests-html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kennethreitz/records&#34;&gt;records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kennethreitz/tablib&#34;&gt;tablib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/yapf&#34;&gt;yapf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/keyring&#34;&gt;keyring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/ahocorasick&#34;&gt;ahocorasick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/esmre&#34;&gt;esmre&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;python-web开发&#34;&gt;Python Web开发&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pallets/flask&#34;&gt;Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sdispater/flask-orator&#34;&gt;Flask-Orator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/channelcat/sanic&#34;&gt;Sanic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ngx-lua常用模块&#34;&gt;ngx_lua常用模块&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-core&#34;&gt;lua-resty-core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-string&#34;&gt;lua-resty-string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-mysql&#34;&gt;lua-resty-mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-redis&#34;&gt;lua-resty-redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudflare/lua-resty-logger-socket&#34;&gt;lua-resty-logger-socket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pintsized/lua-resty-http&#34;&gt;lua-resty-http&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-upload&#34;&gt;lua-resty-upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/srcache-nginx-module&#34;&gt;srcache-nginx-module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/echo-nginx-module&#34;&gt;echo-nginx-module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/headers-more-nginx-module&#34;&gt;headers-more-nginx-module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/set-misc-nginx-module&#34;&gt;set-misc-nginx-module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-limit-traffic&#34;&gt;lua-resty-limit-traffic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-dns&#34;&gt;lua-resty-dns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-lock&#34;&gt;lua-resty-lock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/juce/lua-resty-shell&#34;&gt;lua-resty-shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bungle/lua-resty-template&#34;&gt;lua-resty-template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-upstream-nginx-module&#34;&gt;lua-upstream-nginx-module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-upstream-healthcheck&#34;&gt;lua-resty-upstream-healthcheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/upyun/lua-resty-checkups&#34;&gt;lua-resty-checkups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/agentzh/lua-resty-balancer&#34;&gt;lua-resty-balancer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thibaultcha/lua-resty-jit-uuid&#34;&gt;lua-resty-jit-uuid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thibaultcha/lua-resty-mlcache&#34;&gt;lua-resty-mlcache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hamishforbes/lua-resty-iputils&#34;&gt;lua-resty-iputils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/doujiang24/lua-resty-rsa&#34;&gt;lua-resty-rsa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jkeys089/lua-resty-hmac&#34;&gt;lua-resty-hmac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudflare/nginx-google-oauth&#34;&gt;nginx-google-oauth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudflare/lua-aho-corasick&#34;&gt;lua-aho-corasick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jx-sec/jxwaf&#34;&gt;jxwaf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/GUI/lua-resty-mail&#34;&gt;lua-resty-mail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ngx-lua-web开发&#34;&gt;ngx_lua Web开发&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sumory/lor&#34;&gt;Lor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tylerneylon.com/a/learn-lua/&#34;&gt;Learn Lua in 15 Minutes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;go-web开发&#34;&gt;Go Web开发&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;Gin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;go常用模块&#34;&gt;Go常用模块&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pquerna/otp&#34;&gt;otp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/goofansu/wego&#34;&gt;屏蔽字过滤服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tidwall/gjson&#34;&gt;gjson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/didi/gendry&#34;&gt;gendry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chihaya/chihaya&#34;&gt;Go BitTorrent Tracker, Facebook/CoreOS used&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/GrappigPanda/notorious&#34;&gt;Go BitTorrent Tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/anacrolix/torrent&#34;&gt;Go Full-featured BitTorrent client package and utilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/laher/goxc&#34;&gt;跨平台生成工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uber/go-torch&#34;&gt;go火焰图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/radondb/xenon&#34;&gt;QingCloud MySQL Plus开源版(GTID + Raft + Semi-Sync-Replication)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/meqio/meq&#34;&gt;MQ: meq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gocolly/colly&#34;&gt;Go爬虫框架: colly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/coredns/coredns&#34;&gt;coredns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/colinmarc/hdfs&#34;&gt;A native go client for HDFS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ceph核心概念备忘录</title>
      <link>https://ops.m114.org/post/ceph-key-concepts-backup/</link>
      <pubDate>Fri, 26 Aug 2016 14:38:12 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/ceph-key-concepts-backup/</guid>
      <description>

&lt;h2 id=&#34;scrub&#34;&gt;scrub&lt;/h2&gt;

&lt;p&gt;ceph-osd会定义启动scrub线程，扫描部分对象（哪些对象？），和其他副本比较，发现是否一致。如果发现不一致，ceph会抛出这个异常给用户解决。以PG为粒度，触发scrub。用户手动修复，使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ceph pg repair &amp;lt;pg_id&amp;gt; # 全量复制master节点数据到副本节点。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;scrub分为light scrubbing和Deep scrubbing，前者是频率多直接检查hash值，后者是频率少直接读取内容计算checksum比较。&lt;/p&gt;

&lt;h2 id=&#34;backfill&#34;&gt;backfill&lt;/h2&gt;

&lt;p&gt;当加入或者减少一个新的osd时，所有remapped之后的PG都要迁移到该osd上，此时就叫做backfill。&lt;/p&gt;

&lt;h2 id=&#34;recovery&#34;&gt;recovery&lt;/h2&gt;

&lt;p&gt;当一个osd或者多个osd崩溃之后，再次上线，该osd的状态已经严重滞后了（此时crushmap中还保持该osd）,这个时候就会进行recovery过程。如果是多个osd recovery, 那么这个时候会占用非常多的服务器资源。&lt;/p&gt;

&lt;h2 id=&#34;peering&#34;&gt;peering&lt;/h2&gt;

&lt;p&gt;故障恢复时，对比各个副本的PGlog, 根据PGlog差异构造missing列表，恢复阶段根据missing列表来恢复。peering以PG为单位进行，peering过程中，改PG的IO会被挂起，进入recovery阶段，则可以接受IO，但hit到missing列表项的，也会挂起，直到恢复完成后。因为PGlog的记录是有限的，当peering时发现，PGlog差异太大，则会触发backfill。&lt;/p&gt;

&lt;h2 id=&#34;active-clean&#34;&gt;active + clean&lt;/h2&gt;

&lt;p&gt;PG的status，active的意思是说该PG可以接受读写请求，clean的意思是说PG的副本数达到了要求。&lt;/p&gt;

&lt;h2 id=&#34;degrade&#34;&gt;degrade&lt;/h2&gt;

&lt;p&gt;PG的副本数没有达到要求，但是满足最小副本数要求。&lt;/p&gt;

&lt;h2 id=&#34;incomplete&#34;&gt;incomplete&lt;/h2&gt;

&lt;p&gt;PG的副本数连最小副本数都没有达到。&lt;/p&gt;

&lt;h2 id=&#34;inconsistent&#34;&gt;inconsistent&lt;/h2&gt;

&lt;p&gt;scrub或者deep scrub的时候发现PG内容不一致。&lt;/p&gt;

&lt;h2 id=&#34;down&#34;&gt;down&lt;/h2&gt;

&lt;p&gt;关键数据丢失。进入这个状态的一种方法，比如一个PG有两个副本，先down掉其中的一个osd，再down掉第二个osd，最后把第一个osd起起来，这样这个PG就处于down状态。&lt;/p&gt;

&lt;h2 id=&#34;pglog和日志文件系统&#34;&gt;PGlog和日志文件系统&lt;/h2&gt;

&lt;p&gt;PGlog相当于undo log, journal相当于redo log。一个是在某个操作执行完成之后，做log记录，如果操作成功，则可以undo；另一个是在某个操作执行之前，做log记录，如果操作失败，下次可以redo。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
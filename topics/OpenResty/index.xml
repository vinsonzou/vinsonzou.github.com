<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenResty on ops</title>
    <link>https://ops.m114.org/topics/OpenResty/</link>
    <description>Recent content in OpenResty on ops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2014-2021. All rights reserved.</copyright>
    <lastBuildDate>Thu, 03 Jun 2021 13:08:08 +0800</lastBuildDate><atom:link href="https://ops.m114.org/topics/OpenResty/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nginx实现ip查询服务</title>
      <link>https://ops.m114.org/post/nginx-ipip-service/</link>
      <pubDate>Thu, 03 Jun 2021 13:08:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/nginx-ipip-service/</guid>
      <description>实现内部IP查询服务
 查询当前公网IP 查询当前公网IP地理信息，支持IPv4/IPv6 查询指定IP的地理信息，支持IPv4/IPv6  环境  CentOS 7 Nginx  lua-nginx-module lua-resty-ipmatcher lua-resty-ip2region lua-resty-maxminddb   IP库  ip2region ipv4库 maxminddb 免费ipv6库    配置 lua_shared_dict ip_data 10m; server { server_name ip.test.com; access_log logs/ip.access.log main buffer=32k flush=10s; error_log logs/ip.error.log; location / { default_type &amp;#39;text/plain&amp;#39;; access_by_lua_block { local remote_addr = ngx.var.remote_addr ngx.print(remote_addr) } } location = /ip { default_type application/json; content_by_lua_block { local require = require local ngx = ngx local cjson = require &amp;#34;cjson.</description>
    </item>
    
    <item>
      <title>Gogs/Gitea webhook支持</title>
      <link>https://ops.m114.org/post/gitea-webhook/</link>
      <pubDate>Thu, 03 Jun 2021 10:08:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/gitea-webhook/</guid>
      <description>实现需求为git提交后，自动同步至webhook所在机器的指定目录。也可以支持github的webhook，也能根据不同条件触发不同的webhook，如CI/CD。
环境  CentOS 7 Nginx  ngx_lua lua-resty-shell lua-resty-hmac    配置 对应nginx location配置
location = /webhook/deploy { content_by_lua_file &amp;#39;lua/webhook/deploy.lua&amp;#39;; } deploy.lua
-- Gogs Version: &amp;gt;= v0.10 local require = require local ngx = ngx local cjson = require(&amp;#34;cjson.safe&amp;#34;) local shell = require(&amp;#34;resty.shell&amp;#34;) local hmac = require(&amp;#34;resty.hmac&amp;#34;) local json_encode = cjson.encode local json_decode = cjson.decode -- deploy config local config = { timeout = 30 * 1000, -- 30s socket = &amp;#34;unix:/data/nginx/utils/shell.</description>
    </item>
    
    <item>
      <title>使用Nginx做SNI反向代理</title>
      <link>https://ops.m114.org/post/nginx-sniproxy/</link>
      <pubDate>Wed, 02 Jun 2021 10:18:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/nginx-sniproxy/</guid>
      <description>从 Nginx 1.11.5 版本开始支持用做 SNI 反代，使用 Nginx 做 SNI 反代比用 SNI Proxy 配置起来更简单、更稳定。Nginx stream流程处理见官方文档，此功能可用来加速国外https业务，如苹果订单确认接口。
安装 编译时添加如下参数
 &amp;ndash;with-stream &amp;ndash;with-stream_ssl_preread_module &amp;ndash;with-stream_ssl_module
 配置 基础版
stream { server { listen 443; ssl_preread on; resolver local=on ipv6=off valid=60s; # local=on需要OpenResty补丁 proxy_pass $ssl_preread_server_name:$server_port; } } 优化版
 解决原有无法过滤域名的风险  log_format proxy &amp;#39;$remote_addr [$time_local] $sniproxy_upstream &amp;#39; &amp;#39;$protocol $status $bytes_sent $bytes_received &amp;#39; &amp;#39;$session_time &amp;#34;$upstream_addr&amp;#34; &amp;#39; &amp;#39;&amp;#34;$upstream_bytes_sent&amp;#34; &amp;#34;$upstream_bytes_received&amp;#34; &amp;#34;$upstream_connect_time&amp;#34;&amp;#39;; init_by_lua_block { local sni = require(&amp;#34;resty.sniproxy&amp;#34;) sni.rules = { {&amp;#34;buy.</description>
    </item>
    
    <item>
      <title>Nginx支持WebP</title>
      <link>https://ops.m114.org/post/nginx-support-webp/</link>
      <pubDate>Wed, 02 Jun 2021 10:08:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/nginx-support-webp/</guid>
      <description>WebP格式，Google开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。国外的有 Google（自家的东西肯定要用啦，Chrome Store 甚至已全站使用 WebP）、Facebook 和 ebay，国内的有淘宝、腾讯和美团等。
客户端支持情况:
 Google Chrome 23 起开始支持 WebP（最初发布于2012年11月） Google 的安卓浏览器从 4.2 版本起开始官方支持 WebP（最初发布于2012年11月），4 版本起开始部分支持 Google Chrome安卓版从 Chrome 50 起开始支持 Webp Opera 12.1 开始支持 WebP（最初发布于2012年11月） Edge 18 开始支持 (发布于2018年10月) Firefox 65 支持 (发布于2019年1月)  nginx无缝切换至WebP思路就是：用户访问一张图片(主要为png/jpg格式)，nginx收到请求判断浏览器是否支持WebP，如果支持则返回WebP，不支持则返回原图，达到减少带宽资源的目的。
环境  CentOS 7 libwebp-1.2.0 Nginx  ngx_lua lua-resty-shell    安装部署 cwebp依赖lib
yum -y install libGL libX11 libXi 配置 mime.types新增webp格式支持
image/webp webp; 图片对应nginx location配置
location ~ ^/(images|static)/ { rewrite_by_lua_file &amp;#34;/data/nginx/lua/webp.</description>
    </item>
    
    <item>
      <title>本人OpenResty实践集合</title>
      <link>https://ops.m114.org/post/openresty-case/</link>
      <pubDate>Tue, 01 Jun 2021 10:08:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/openresty-case/</guid>
      <description> 优化  支持Brotli Upstream主动健康检查 动态证书 OCSP缓存 ssl分布式session mTLS支持   命令行执行  Nginx支持WebP gogs/gitea webhook   灰度发布  基于IP（动态IP） 自定义变量   微信机器人 安全相关  授权下载 简易CC防护 SSO认证 安全token   API服务  IP查询服务 MQ解耦，对接阿里云RocketMQ   缓存服务  主动缓存 SDK缓存   特权进程实践  ipset操作   代理相关  http代理 SNI代理    </description>
    </item>
    
    <item>
      <title>在 OpenResty 中使用正则表达式</title>
      <link>https://ops.m114.org/post/use-regular-expressions-in-OpenResty/</link>
      <pubDate>Sun, 30 Oct 2016 10:48:19 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/use-regular-expressions-in-OpenResty/</guid>
      <description>在 OpenResty 中使用正则表达式，社区中推荐的做法是使用ngx.re api。比如匹配一个字符串是否为 http(s) 的链接，可以这么写：
local function is_http_url(s) return ngx.re.find(s, [[^https?://[\w-_?.:/+=&amp;amp;#%]+$]]) end 压测一下:
local t = os.clock() for _ = 1, max do is_http_url(&amp;#34;http://blog.stackoverflow.com/2016/10/Stack-Overflow-92-Podcast-The-Guerilla-Guide-to-Interviewing/?cb=1&amp;#34;) end print(&amp;#34;Time cost: &amp;#34;, os.clock() - t, &amp;#34; s&amp;#34;) 结果：Time cost: 2.663408 s
另一种做法是使用 lua 的正则语法：
local function is_http_url(s) return s:find(&amp;#34;^https?://[%w-_%.%?:/%+=&amp;amp;#%%]+$&amp;#34;) end 结果：Time cost: 0.652221 s
呃，怎么前者耗时是后者的四倍？lua 内置的小小状态机实现，居然打败了大名鼎鼎的 PCRE 库！说好的社区推荐呢！
仔细一瞧，前者的确漏了点东西。ngx.re默认不会缓存正则表达式编译后的结果。一般在其它编程平台上，我们都会先把字符串编译成正则表达式，再用到正则函数中。比如在 Python 里使用 re.compile。所以赶紧补上：
return ngx.re.find(s, [[^https?://[\w-_?.:/+=&amp;amp;#%]+$]], &amp;#34;o&amp;#34;) 好，这次性能有了明显提升：Time cost: 0.646518 s
不错不错，虽然还是跟 lua 的实现不分上下，考虑到 lua 本身的正则支持非常弱（比如连 (foo|bar) 这种形式都不行），而且语法离经叛道，改用 ngx.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenResty on ops</title>
    <link>https://ops.m114.org/topics/openresty/</link>
    <description>Recent content in OpenResty on ops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2014-2021. All rights reserved.</copyright>
    <lastBuildDate>Sun, 30 Oct 2016 10:48:19 +0800</lastBuildDate><atom:link href="https://ops.m114.org/topics/openresty/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 OpenResty 中使用正则表达式</title>
      <link>https://ops.m114.org/post/use-regular-expressions-in-openresty/</link>
      <pubDate>Sun, 30 Oct 2016 10:48:19 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/use-regular-expressions-in-openresty/</guid>
      <description>在 OpenResty 中使用正则表达式，社区中推荐的做法是使用ngx.re api。比如匹配一个字符串是否为 http(s) 的链接，可以这么写：
local function is_http_url(s) return ngx.re.find(s, [[^https?://[\w-_?.:/+=&amp;amp;#%]+$]]) end 压测一下:
local t = os.clock() for _ = 1, max do is_http_url(&amp;quot;http://blog.stackoverflow.com/2016/10/Stack-Overflow-92-Podcast-The-Guerilla-Guide-to-Interviewing/?cb=1&amp;quot;) end print(&amp;quot;Time cost: &amp;quot;, os.clock() - t, &amp;quot; s&amp;quot;) 结果：Time cost: 2.663408 s
另一种做法是使用 lua 的正则语法：
local function is_http_url(s) return s:find(&amp;quot;^https?://[%w-_%.%?:/%+=&amp;amp;#%%]+$&amp;quot;) end 结果：Time cost: 0.652221 s
呃，怎么前者耗时是后者的四倍？lua 内置的小小状态机实现，居然打败了大名鼎鼎的 PCRE 库！说好的社区推荐呢！
仔细一瞧，前者的确漏了点东西。ngx.re默认不会缓存正则表达式编译后的结果。一般在其它编程平台上，我们都会先把字符串编译成正则表达式，再用到正则函数中。比如在 Python 里使用 re.compile。所以赶紧补上：
return ngx.re.find(s, [[^https?://[\w-_?.:/+=&amp;amp;#%]+$]], &amp;quot;o&amp;quot;) 好，这次性能有了明显提升：Time cost: 0.646518 s
不错不错，虽然还是跟 lua 的实现不分上下，考虑到 lua 本身的正则支持非常弱（比如连 (foo|bar) 这种形式都不行），而且语法离经叛道，改用 ngx.</description>
    </item>
    
  </channel>
</rss>

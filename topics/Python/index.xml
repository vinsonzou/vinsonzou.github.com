<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on ops</title>
    <link>https://ops.m114.org/topics/Python/</link>
    <description>Recent content in Python on ops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2014-2021. All rights reserved.</copyright>
    <lastBuildDate>Sat, 05 Jun 2021 13:15:08 +0800</lastBuildDate><atom:link href="https://ops.m114.org/topics/Python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python 3.9.5 编译报错 Could not import runpy module 问题</title>
      <link>https://ops.m114.org/post/python-3.9.5-build-error/</link>
      <pubDate>Sat, 05 Jun 2021 13:15:08 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/python-3.9.5-build-error/</guid>
      <description>环境  CentOS 7.3.1611 gcc-4.8.5-28.el7_5.1 Python 3.9.5  相关报错 ./python -E -S -m sysconfig --generate-posix-vars ;\ if test $? -ne 0 ; then \ 	echo &amp;#34;generate-posix-vars failed&amp;#34; ; \ 	rm -f ./pybuilddir.txt ; \ 	exit 1 ; \ fi Could not import runpy module Traceback (most recent call last): File &amp;#34;/tmp/Python-3.9.5/Lib/runpy.py&amp;#34;, line 15, in &amp;lt;module&amp;gt; import importlib.util File &amp;#34;/tmp/Python-3.9.5/Lib/importlib/util.py&amp;#34;, line 2, in &amp;lt;module&amp;gt; from . import abc File &amp;#34;/tmp/Python-3.</description>
    </item>
    
    <item>
      <title>Python的while 1跟while True到底有什么区别?</title>
      <link>https://ops.m114.org/post/python-while-1-vs-for-whiletrue/</link>
      <pubDate>Wed, 23 Jan 2019 17:46:06 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/python-while-1-vs-for-whiletrue/</guid>
      <description>定义两个方法,分别使用while循环
def t1(): while 1: pass def t2(): while True: pass 单从功能上说,两种无任何区别,那么,来看看字节码上的区别:
For Python 2.x
import dis #载入反编译模块,Python内置的 dis.dis(t1) #对应的是while 1,下面是输出 2 0 SETUP_LOOP 3 (to 6) 3 &amp;gt;&amp;gt; 3 JUMP_ABSOLUTE 3 &amp;gt;&amp;gt; 6 LOAD_CONST 0 (None) 9 RETURN_VALUE dis.dis(t2) #对应的是while True,下面是输出 2 0 SETUP_LOOP 10 (to 13) &amp;gt;&amp;gt; 3 LOAD_GLOBAL 0 (True) 6 POP_JUMP_IF_FALSE 12 3 9 JUMP_ABSOLUTE 3 &amp;gt;&amp;gt; 12 POP_BLOCK &amp;gt;&amp;gt; 13 LOAD_CONST 0 (None) 16 RETURN_VALUE 很明显, while 1的字节码只有while True的一半.</description>
    </item>
    
    <item>
      <title>Python数据库连接池实例--PooledDB</title>
      <link>https://ops.m114.org/post/python-mysql-PooledDB/</link>
      <pubDate>Tue, 16 Oct 2018 16:27:12 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/python-mysql-PooledDB/</guid>
      <description>不用连接池的MySQL连接方法
import MySQLdb conn= MySQLdb.connect(host=&amp;#39;127.0.0.1&amp;#39;,user=&amp;#39;root&amp;#39;,passwd=&amp;#39;password&amp;#39;,db=&amp;#39;DB_test&amp;#39;,port=3306) cur=conn.cursor() SQL=&amp;#34;select * from table_test&amp;#34; cur.execute(SQL) r=cur.fetchall() cur.close() conn.close() 用连接池后的连接方法
import MySQLdb from DBUtils.PooledDB import PooledDB pool = PooledDB(MySQLdb,5,host=&amp;#39;127.0.0.1&amp;#39;,user=&amp;#39;root&amp;#39;,passwd=&amp;#39;password&amp;#39;,db=&amp;#39;DB_test&amp;#39;,port=3306) #5为连接池里的最少连接数 conn = pool.connection() #以后每次需要数据库连接就是用connection()函数获取连接就好了 cur=conn.cursor() SQL=&amp;#34;select * from table_test&amp;#34; cur.execute(SQL) r=cur.fetchall() cur.close() conn.close() PooledDB的参数
 mincached: 最少的空闲连接数，如果空闲连接数小于这个数，pool会创建一个新的连接 maxcached: 最大的空闲连接数，如果空闲连接数大于这个数，pool会关闭空闲连接 maxconnections: 最大的连接数， blocking: 当连接数达到最大的连接数时，在请求连接的时候，如果这个值是True，请求连接的程序会一直等待，直到当前连接数小于最大连接数，如果这个值是False，会报错， maxshared: 当连接数达到这个数，新请求的连接会分享已经分配出去的连接  连接池对性能的提升表现在
 在程序创建连接的时候，可以从一个空闲的连接中获取，不需要重新初始化连接，提升获取连接的速度 关闭连接的时候，把连接放回连接池，而不是真正的关闭，所以可以减少频繁地打开和关闭连接 避免mysql连接数耗尽  DBUtils下载地址：https://pypi.python.org/pypi/DBUtils/</description>
    </item>
    
    <item>
      <title>[python]统计列表中重复项的出现次数</title>
      <link>https://ops.m114.org/post/python-count-duplicate-values-of-list/</link>
      <pubDate>Sun, 30 Oct 2016 10:27:24 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/python-count-duplicate-values-of-list/</guid>
      <description>列表项由数字、字符串组成，统计重复项
&amp;gt;&amp;gt;&amp;gt; from collections import defaultdict &amp;gt;&amp;gt;&amp;gt; d = defaultdict(int) &amp;gt;&amp;gt;&amp;gt; for x in [1, 2, 3, 1, 2, 3, 1]: ... d[x] += 1 ... &amp;gt;&amp;gt;&amp;gt; dict(d) {1: 3, 2: 2, 3: 2} &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; c = defaultdict(int) &amp;gt;&amp;gt;&amp;gt; for y in [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;c&amp;#39;]: ... c[y] += 1 ... &amp;gt;&amp;gt;&amp;gt; dict(c) {&amp;#39;a&amp;#39;: 2, &amp;#39;c&amp;#39;: 2, &amp;#39;b&amp;#39;: 1} 列表项由字典组成，统计某一键值的重复数
&amp;gt;&amp;gt;&amp;gt; e = defaultdict(int) &amp;gt;&amp;gt;&amp;gt; for x in [{&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 1}, {&amp;#39;a&amp;#39;: 2, &amp;#39;b&amp;#39;:1}, {&amp;#39;a&amp;#39;: 1, &amp;#39;c&amp;#39;: 3}]: .</description>
    </item>
    
  </channel>
</rss>

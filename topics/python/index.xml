<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on ops</title>
    <link>https://ops.m114.org/topics/python/index.xml</link>
    <description>Recent content in Python on ops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2014-2018. All rights reserved.</copyright>
    <atom:link href="https://ops.m114.org/topics/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python数据库连接池实例--PooledDB</title>
      <link>https://ops.m114.org/post/python-mysql-PooledDB/</link>
      <pubDate>Tue, 16 Oct 2018 16:27:12 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/python-mysql-PooledDB/</guid>
      <description>&lt;p&gt;&lt;strong&gt;不用连接池的MySQL连接方法&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import MySQLdb
conn= MySQLdb.connect(host=&#39;127.0.0.1&#39;,user=&#39;root&#39;,passwd=&#39;password&#39;,db=&#39;DB_test&#39;,port=3306)
cur=conn.cursor()
SQL=&amp;quot;select * from table_test&amp;quot;
cur.execute(SQL)
r=cur.fetchall()
cur.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;用连接池后的连接方法&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import MySQLdb
from DBUtils.PooledDB import PooledDB
pool = PooledDB(MySQLdb,5,host=&#39;127.0.0.1&#39;,user=&#39;root&#39;,passwd=&#39;password&#39;,db=&#39;DB_test&#39;,port=3306)    #5为连接池里的最少连接数

conn = pool.connection()  #以后每次需要数据库连接就是用connection()函数获取连接就好了
cur=conn.cursor()
SQL=&amp;quot;select * from table_test&amp;quot;
cur.execute(SQL)
r=cur.fetchall()
cur.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;PooledDB的参数&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mincached: 最少的空闲连接数，如果空闲连接数小于这个数，pool会创建一个新的连接&lt;/li&gt;
&lt;li&gt;maxcached: 最大的空闲连接数，如果空闲连接数大于这个数，pool会关闭空闲连接&lt;/li&gt;
&lt;li&gt;maxconnections: 最大的连接数，&lt;/li&gt;
&lt;li&gt;blocking: 当连接数达到最大的连接数时，在请求连接的时候，如果这个值是True，请求连接的程序会一直等待，直到当前连接数小于最大连接数，如果这个值是False，会报错，&lt;/li&gt;
&lt;li&gt;maxshared: 当连接数达到这个数，新请求的连接会分享已经分配出去的连接&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;连接池对性能的提升表现在&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在程序创建连接的时候，可以从一个空闲的连接中获取，不需要重新初始化连接，提升获取连接的速度&lt;/li&gt;
&lt;li&gt;关闭连接的时候，把连接放回连接池，而不是真正的关闭，所以可以减少频繁地打开和关闭连接&lt;/li&gt;
&lt;li&gt;避免mysql连接数耗尽&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DBUtils下载地址：&lt;a href=&#34;https://pypi.python.org/pypi/DBUtils/&#34;&gt;https://pypi.python.org/pypi/DBUtils/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[python]统计列表中重复项的出现次数</title>
      <link>https://ops.m114.org/post/python-count-duplicate-values-of-list/</link>
      <pubDate>Sun, 30 Oct 2016 10:27:24 +0800</pubDate>
      
      <guid>https://ops.m114.org/post/python-count-duplicate-values-of-list/</guid>
      <description>&lt;p&gt;列表项由数字、字符串组成，统计重复项&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from collections import defaultdict
&amp;gt;&amp;gt;&amp;gt; d = defaultdict(int)
&amp;gt;&amp;gt;&amp;gt; for x in [1, 2, 3, 1, 2, 3, 1]:
...     d[x] += 1
...
&amp;gt;&amp;gt;&amp;gt; dict(d)
{1: 3, 2: 2, 3: 2}
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; c = defaultdict(int)
&amp;gt;&amp;gt;&amp;gt; for y in [&#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;c&#39;, &#39;c&#39;]:
...     c[y] += 1
...
&amp;gt;&amp;gt;&amp;gt; dict(c)
{&#39;a&#39;: 2, &#39;c&#39;: 2, &#39;b&#39;: 1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列表项由字典组成，统计某一键值的重复数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; e = defaultdict(int)
&amp;gt;&amp;gt;&amp;gt; for x in [{&#39;a&#39;: 1, &#39;b&#39;: 1}, {&#39;a&#39;: 2, &#39;b&#39;:1}, {&#39;a&#39;: 1, &#39;c&#39;: 3}]:
...     e[x[&#39;a&#39;]] += 1
...
&amp;gt;&amp;gt;&amp;gt; dict(e)   # &#39;a&#39;: 1 出现2次，&#39;a&#39;: 2 出现1次
{1: 2, 2: 1}
&amp;gt;&amp;gt;&amp;gt; e.items()
[(1, 2), (2, 1)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/14374568/counting-duplicate-words-in-python-the-fastest-way&#34;&gt;dictionary - counting duplicate words in python the fastest way - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
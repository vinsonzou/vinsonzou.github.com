<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ops</title>
    <link>http://ops.m114.org:80/post/</link>
    <description>Recent content in Posts on ops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 03 Jun 2015 23:04:55 +0800</lastBuildDate>
    <atom:link href="http://ops.m114.org:80/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>kernel igb 00000500 0 eth0 reset adapter</title>
      <link>http://ops.m114.org/post/kernel-igb-00000100-0-eth0-reset-adapter/</link>
      <pubDate>Wed, 03 Jun 2015 23:04:55 +0800</pubDate>
      
      <guid>http://ops.m114.org/post/kernel-igb-00000100-0-eth0-reset-adapter/</guid>
      <description>&lt;p&gt;系统环境&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 6.4&lt;/li&gt;
&lt;li&gt;igb driver version 4.0.1-k&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;报错信息如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Jun  3 13:20:05 localhost kernel: igb 0000:05:00.1: eth1: Reset adapter
Jun  3 13:20:06 localhost kernel: igb 0000:05:00.0: eth0: Reset adapter
Jun  3 13:20:11 localhost kernel: igb: eth1 NIC Link is Up 1000 Mbps Full Duplex, Flow Control: RX
Jun  3 13:20:12 localhost kernel: igb: eth0 NIC Link is Up 1000 Mbps Full Duplex, Flow Control: RX
Jun  3 13:55:26 localhost kernel: igb 0000:05:00.1: eth1: Reset adapter
Jun  3 13:55:27 localhost kernel: igb 0000:05:00.0: eth0: Reset adapter
Jun  3 13:55:30 localhost kernel: igb: eth1 NIC Link is Up 1000 Mbps Full Duplex, Flow Control: RX
Jun  3 13:55:30 localhost kernel: igb: eth0 NIC Link is Up 1000 Mbps Full Duplex, Flow Control: RX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决办法,参考&lt;a href=&#34;https://bugs.centos.org/view.php?id=7034&#34;&gt;CentOS Bug Tracker&lt;/a&gt;，升级igb driver至5.1.2以上，我这里直接升级至最新版本。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://sourceforge.net/projects/e1000/files/igb%20stable/5.2.18/igb-5.2.18.tar.gz/download -O igb-5.2.18.tar.gz
tar zxf igb-5.2.18.tar.gz
cd igb-5.2.18/src/igb-5.1.2/src
yum install kernel-devel
make install
rmmod igb; modprobe igb
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>DNSPOD API SSL证书调整(subjectAltName)引起的报错</title>
      <link>http://ops.m114.org/post/DNSPOD-API-SSL-subjectAltName/</link>
      <pubDate>Sun, 10 May 2015 23:44:43 +0800</pubDate>
      
      <guid>http://ops.m114.org/post/DNSPOD-API-SSL-subjectAltName/</guid>
      <description>&lt;p&gt;报错信息如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Python 2.7 (r27:82500, Jan  7 2014, 23:14:35)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-50)] on linux2
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import requests
&amp;gt;&amp;gt;&amp;gt; r = requests.get(&amp;quot;https://dnsapi.cn&amp;quot;)
Traceback (most recent call last):
    File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
    File &amp;quot;/usr/local/lib/python2.7/site-packages/requests-2.0.0-py2.7.egg/requests/api.py&amp;quot;, line 55, in get
        return request(&#39;get&#39;, url, **kwargs)
    File &amp;quot;/usr/local/lib/python2.7/site-packages/requests-2.0.0-py2.7.egg/requests/api.py&amp;quot;, line 44, in request
        return session.request(method=method, url=url, **kwargs)
    File &amp;quot;/usr/local/lib/python2.7/site-packages/requests-2.0.0-py2.7.egg/requests/sessions.py&amp;quot;, line 361, in request
        resp = self.send(prep, **send_kwargs)
    File &amp;quot;/usr/local/lib/python2.7/site-packages/requests-2.0.0-py2.7.egg/requests/sessions.py&amp;quot;, line 464, in send
        r = adapter.send(request, **kwargs)
    File &amp;quot;/usr/local/lib/python2.7/site-packages/requests-2.0.0-py2.7.egg/requests/adapters.py&amp;quot;, line 363, in send
        raise SSLError(e)
requests.exceptions.SSLError: hostname &#39;dnsapi.cn&#39; doesn&#39;t match u&#39;www.dnspod.cn&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DNSPOD当前证书截图：
&lt;img src=&#34;http://m114-static.qiniudn.com/img/dnspod_cert.png&#34; alt=&#34;dnspod&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;证书信息查看&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl s_client -connect dnsapi.cn:443 | tee dnsapi.cert
openssl x509 -inform PEM -in dnsapi.cert -text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python SSL验证&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Python 2.7 (r27:82500, Jan  7 2014, 23:14:35)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-50)] on linux2
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;  import _ssl
&amp;gt;&amp;gt;&amp;gt; _ssl._test_decode_cert(&#39;dnsapi.cert&#39;)
{&#39;notBefore&#39;: &#39;Mar 24 00:00:00 2015 GMT&#39;, &#39;serialNumber&#39;: &#39;3E4F6D495C407163586D0B900A007555&#39;, &#39;notAfter&#39;: &#39;May 12 23:59:59 2015 GMT&#39;, &#39;version&#39;: 3, &#39;subject&#39;: (((&#39;1.3.6.1.4.1.311.60.2.1.3&#39;, u&#39;CN&#39;),), ((&#39;1.3.6.1.4.1.311.60.2.1.2&#39;, u&#39;ShanDong&#39;),), ((&#39;1.3.6.1.4.1.311.60.2.1.1&#39;, u&#39;YanTai&#39;),), ((&#39;2.5.4.15&#39;, u&#39;Private Organization&#39;),), ((&#39;serialNumber&#39;, u&#39;370635200013814&#39;),), ((&#39;countryName&#39;, u&#39;CN&#39;),), ((&#39;stateOrProvinceName&#39;, u&#39;\u5c71\u4e1c\u7701&#39;),), ((&#39;localityName&#39;, u&#39;\u70df\u53f0\u5e02&#39;),), ((&#39;organizationName&#39;, u&#39;DNSPod, Inc.&#39;),), ((&#39;organizationalUnitName&#39;, u&#39;IT&#39;),), ((&#39;commonName&#39;, u&#39;www.dnspod.cn&#39;),)), &#39;issuer&#39;: (((&#39;countryName&#39;, u&#39;US&#39;),), ((&#39;organizationName&#39;, u&#39;GeoTrust Inc.&#39;),), ((&#39;commonName&#39;, u&#39;GeoTrust Extended Validation SSL CA - G2&#39;),))}


Python 2.7.6 (default, Sep  9 2014, 15:04:36)
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import _ssl
&amp;gt;&amp;gt;&amp;gt; _ssl._test_decode_cert(&#39;dnsapi.cert&#39;)
{&#39;subjectAltName&#39;: ((&#39;DNS&#39;, &#39;www.dnsapi.cn&#39;), (&#39;DNS&#39;, &#39;monitor.dnspod.cn&#39;), (&#39;DNS&#39;, &#39;api.dnspod.com&#39;), (&#39;DNS&#39;, &#39;tickets.dnspod.com&#39;), (&#39;DNS&#39;, &#39;ec.dnspod.cn&#39;), (&#39;DNS&#39;, &#39;domains.dnspod.cn&#39;), (&#39;DNS&#39;, &#39;support.dnspod.cn&#39;), (&#39;DNS&#39;, &#39;m.dnspod.cn&#39;), (&#39;DNS&#39;, &#39;ssl.ptlogin2.dnspod.cn&#39;), (&#39;DNS&#39;, &#39;monitor.dnspod.com&#39;), (&#39;DNS&#39;, &#39;support.dnspod.com&#39;), (&#39;DNS&#39;, &#39;tickets.dnspod.cn&#39;), (&#39;DNS&#39;, &#39;statics.dnspod.cn&#39;), (&#39;DNS&#39;, &#39;stat.dnspod.cn&#39;), (&#39;DNS&#39;, &#39;www.dnspod.com&#39;), (&#39;DNS&#39;, &#39;dnspod.com&#39;), (&#39;DNS&#39;, &#39;static.dnspod.com&#39;), (&#39;DNS&#39;, &#39;libs.dnspod.cn&#39;), (&#39;DNS&#39;, &#39;blog.dnspod.cn&#39;), (&#39;DNS&#39;, &#39;dnsapi.cn&#39;), (&#39;DNS&#39;, &#39;www.dnspod.cn&#39;), (&#39;DNS&#39;, &#39;dnspod.cn&#39;)), &#39;notBefore&#39;: &#39;Mar 24 00:00:00 2015 GMT&#39;, &#39;serialNumber&#39;: &#39;3E4F6D495C407163586D0B900A007555&#39;, &#39;notAfter&#39;: &#39;May 12 23:59:59 2015 GMT&#39;, &#39;version&#39;: 3, &#39;subject&#39;: (((&#39;1.3.6.1.4.1.311.60.2.1.3&#39;, u&#39;CN&#39;),), ((&#39;1.3.6.1.4.1.311.60.2.1.2&#39;, u&#39;ShanDong&#39;),), ((&#39;1.3.6.1.4.1.311.60.2.1.1&#39;, u&#39;YanTai&#39;),), ((&#39;businessCategory&#39;, u&#39;Private Organization&#39;),), ((&#39;serialNumber&#39;, u&#39;370635200013814&#39;),), ((&#39;countryName&#39;, u&#39;CN&#39;),), ((&#39;stateOrProvinceName&#39;, u&#39;\u5c71\u4e1c\u7701&#39;),), ((&#39;localityName&#39;, u&#39;\u70df\u53f0\u5e02&#39;),), ((&#39;organizationName&#39;, u&#39;DNSPod, Inc.&#39;),), ((&#39;organizationalUnitName&#39;, u&#39;IT&#39;),), ((&#39;commonName&#39;, u&#39;www.dnspod.cn&#39;),)), &#39;issuer&#39;: (((&#39;countryName&#39;, u&#39;US&#39;),), ((&#39;organizationName&#39;, u&#39;GeoTrust Inc.&#39;),), ((&#39;commonName&#39;, u&#39;GeoTrust Extended Validation SSL CA - G2&#39;),))}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决方法：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;升级Python至2.7.3以上版本,低版本不支持ssl的subjectAltName特性&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;来源参考:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/shazow/urllib3/issues/523&#34;&gt;https://github.com/shazow/urllib3/issues/523&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>利用TsunamiUDP加速跨机房迁移</title>
      <link>http://ops.m114.org/post/Use-TsunamiUDP-accelerate-migration-across-data-centers/</link>
      <pubDate>Sun, 26 Apr 2015 16:00:00 +0800</pubDate>
      
      <guid>http://ops.m114.org/post/Use-TsunamiUDP-accelerate-migration-across-data-centers/</guid>
      <description>

&lt;h2 id=&#34;部署:1390cc2c30e4b37523ebd768ec9abe1b&#34;&gt;部署&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;yum -y install automake autoconf

git clone git://github.com/rriley/tsunami-udp.git
cd tsunami-udp
./recompile.sh
cp server/tsunamid client/tsunami /usr/bin

#或者从sf.net下载
wget http://iweb.dl.sourceforge.net/project/tsunami-udp/tsunami-udp/tsunami-v1.1-cvsbuild42/tsunami-v1.1-cvsbuild42.tar.gz
tar zxf tsunami-v1.1-cvsbuild42.tar.gz
cd tsunami-udp-v11-b42
./recompile.sh
cp server/tsunamid client/tsunami /usr/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用:1390cc2c30e4b37523ebd768ec9abe1b&#34;&gt;使用&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#1、防火墙调整
#服务端：开启TCP 46224(默认端口)
#客户端：开启UDP 46224(默认端口)

#2、开启服务端
#待迁移文件都放在/app/game_data目录下(也可指定单文件传输)

tsunamid --hbtimeout 60 /app/game_data/*

#PS：这里设定心跳包超时时间为60秒，默认为15秒，在使用中很容易中断导致传输失败

#3、开启客户端
# 拉取服务端(122.225.100.100)的game_db.lz4文件，并限速100M(建议限制下，不然机房带宽就满了哦)
tsunami set rate 100M connect 122.225.100.100 get gcmob_db.lz4

# 拉取目录下所有文件
tsunami set rate 100M connect 122.225.100.100 get \*

#文档：http://tsunami-udp.cvs.sourceforge.net/viewvc/tsunami-udp/docs/USAGE.txt

PS：未避免泄密，IP是随机填的
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;跨机房迁移示例:1390cc2c30e4b37523ebd768ec9abe1b&#34;&gt;跨机房迁移示例&lt;/h2&gt;

&lt;p&gt;场景：
将14G文件从杭州机房迁移至北京机房&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法1：使用wget下载
&lt;img src=&#34;http://m114-static.qiniudn.com/img/wget.png&#34; alt=&#34;wget下载&#34; /&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法2：使用TsunamiUDP工具
&lt;img src=&#34;http://m114-static.qiniudn.com/img/TsunamiUDP.jpg&#34; alt=&#34;TsunamiUDP下载&#34; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总结:&lt;/p&gt;

&lt;p&gt;TsunamiUDP相比wget优势太明显了，TsunamiUDP把带宽能跑满，而wget的速度不敢恭维。&lt;/p&gt;

&lt;h2 id=&#34;参考:1390cc2c30e4b37523ebd768ec9abe1b&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://sysadminandnetworking.blogspot.com/2013/06/tsunami-udp-faster-than-rsync.html&#34;&gt;http://sysadminandnetworking.blogspot.com/2013/06/tsunami-udp-faster-than-rsync.html&lt;/a&gt;
&lt;a href=&#34;http://blog.csdn.net/awschina/article/details/38661889&#34;&gt;http://blog.csdn.net/awschina/article/details/38661889&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zabbix使用Telegram发送报警</title>
      <link>http://ops.m114.org/post/zabbix-alerts-use-telegram/</link>
      <pubDate>Sat, 25 Apr 2015 17:16:29 +0800</pubDate>
      
      <guid>http://ops.m114.org/post/zabbix-alerts-use-telegram/</guid>
      <description>

&lt;h3 id=&#34;环境:36b0c308d7ec12f7aa9f0b6f722a727f&#34;&gt;环境&lt;/h3&gt;

&lt;p&gt;CentOS 6.X x86_64&lt;/p&gt;

&lt;h3 id=&#34;编译telegram:36b0c308d7ec12f7aa9f0b6f722a727f&#34;&gt;编译Telegram&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;yum -y install lua-devel openssl-devel libconfig-devel readline-devel libevent-devel

git clone --recursive https://github.com/vysheng/tg.git
cd tg
./configure
make

mkdir /usr/local/tg
cp tg-server.pub /usr/local/tg
cp bin/telegram-cli /usr/local/tg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;zabbix报警脚本/usr/local/tg/telegram.sh:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

cd `dirname $0`
./telegram-cli -k tg-server.pub -WDCRE -P 8890 -d &amp;amp;&amp;gt;/dev/null &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;zabbix报警配置:36b0c308d7ec12f7aa9f0b6f722a727f&#34;&gt;Zabbix报警配置&lt;/h3&gt;

&lt;p&gt;将如下Zabbix Server配置注释并修改如下
AlertScriptsPath=/usr/local/zabbix/alertscripts&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/local/zabbix/alertscripts/tg.sh&lt;/code&gt;内容如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

export to=$1;
export subject=$2;
export body=$3;

echo -e &amp;quot;msg $to ${subject}_#_${body}&amp;quot; | nc localhost 8890
#注意事项: body只能有一行内容，超过一行的内容是不会发送的。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zabbix添加Media types
&lt;img src=&#34;http://m114-static.qiniudn.com/img/media_Telegram.png&#34; alt=&#34;media_Telegram&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;PS：Telegram已于2015年7月10日被天朝和谐。。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitor SSL certificate expiry</title>
      <link>http://ops.m114.org/post/monitor-ssl-certificate-expiry/</link>
      <pubDate>Sat, 25 Apr 2015 16:31:41 +0800</pubDate>
      
      <guid>http://ops.m114.org/post/monitor-ssl-certificate-expiry/</guid>
      <description>&lt;p&gt;看到网上弄了个zabbix监控SSL证书过期时间的,给咱业务也加了个此监控。&lt;/p&gt;

&lt;p&gt;改进如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;基于域名监控(一台服务器上有多个证书)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;当前使用的shell脚本如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

host=$1
port=443
end_date=`openssl s_client -servername $host -host $host -port $port -showcerts &amp;lt;/dev/null 2&amp;gt;/dev/null |
  sed -n &#39;/BEGIN CERTIFICATE/,/END CERT/p&#39; |
  openssl x509 -text 2&amp;gt;/dev/null |
  sed -n &#39;s/ *Not After : *//p&#39;`
# openssl 检验和验证SSL证书。
# -servername $host 因一台主机存在多个证书，利用SNI特性检查
# &amp;lt;/dev/null 定向标准输入，防止交互式程序Hang。从/dev/null 读时，直接读出0 。
# sed -n 和p 一起使用，仅显示匹配到的部分。 //,// 区间匹配。
# openssl x509 -text 解码证书信息，包含证书的有效期。

if [ -n &amp;quot;$end_date&amp;quot; ]
then
    end_date_seconds=`date &#39;+%s&#39; --date &amp;quot;$end_date&amp;quot;`
    now_seconds=`date &#39;+%s&#39;`
    echo &amp;quot;($end_date_seconds-$now_seconds)/24/3600&amp;quot; | bc
fi
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用Hugo搭建免费个人Blog</title>
      <link>http://ops.m114.org/post/how-to-use-hugo/</link>
      <pubDate>Tue, 11 Nov 2014 17:15:00 +0800</pubDate>
      
      <guid>http://ops.m114.org/post/how-to-use-hugo/</guid>
      <description>

&lt;h1 id=&#34;hugo是什么:fb5094e696928981151e6c76593c6932&#34;&gt;Hugo是什么&lt;/h1&gt;

&lt;p&gt;Hugo是一个工具，可以用于搭建静态站点，类似jekyll，不过Hugo是Golang写的，大家应该知道Golang有一个对部署友好的特点，那就是静态编译，所以安装起来非常方便，不像jekyll安装起来比较麻烦。&lt;/p&gt;

&lt;p&gt;可能有些读者也不知道jekyll是干啥的，我这简单解释一下，这些软件通常可以叫做静态站点生成器，我们可以使用Markdown格式编写一些文本，按照指定的目录结构存放，然后再在指定的目录里放置css等静态文件，jekyll就可以帮你生成一个静态站点。那既然是静态站点，你就可以很方便的部署了，因为只要搭配一个web server即可，甚至可以部署在github pages上，&lt;a href=&#34;http://ops.m114.org&#34;&gt;ops.m114.org&lt;/a&gt;是部署在gitcafe pages上的，这样国人访问速度快一些。因为github和gitcafe的pages功能是免费的，这也是我标题中“免费”二次的原因&lt;/p&gt;

&lt;h1 id=&#34;hugo的使用:fb5094e696928981151e6c76593c6932&#34;&gt;Hugo的使用&lt;/h1&gt;

&lt;p&gt;Hugo的官网是&lt;a href=&#34;http://gohugo.io/&#34;&gt;gohugo.io&lt;/a&gt;，里边有个Docs，大家可以跟着走一遍，主要是里边的quickstart。笔者就不给大家做翻译了，给读者介绍一下如何基于笔者这个Blog来搭建，在这基础上修改就要容易不少了。&lt;/p&gt;

&lt;h2 id=&#34;下载hugo:fb5094e696928981151e6c76593c6932&#34;&gt;下载Hugo&lt;/h2&gt;

&lt;p&gt;官网上首页就有下载链接，去&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo下载&lt;/a&gt;即可&lt;/p&gt;

&lt;h2 id=&#34;把笔者的这个blog-clone下来:fb5094e696928981151e6c76593c6932&#34;&gt;把笔者的这个blog clone下来&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/vinsonzou/hugo.blog.git
cd hugo.blog
hugo server -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码是Linux、OS X控制台命令，windows用户请自己转换成windows操作方法。看到控制台打印出的内容了么？Hugo已经帮忙生成了一个静态站点，并且监听在本机的1313端口，访问一下试试吧：）&lt;/p&gt;

&lt;h2 id=&#34;修改hugo-blog:fb5094e696928981151e6c76593c6932&#34;&gt;修改hugo.blog&lt;/h2&gt;

&lt;p&gt;一行代码就跑起来了，是不是so easy，接下来笔者大体介绍一下各个目录中的作用，读者可以修改成自己的一些信息&lt;/p&gt;

&lt;p&gt;content目录就是存放你原始markdown文本的地方，content的子目录和markdown文件名组成了url地址，比如这篇文章的url是：&lt;a href=&#34;http://ops.m114.org/post/how-to-use-hugo/&#34;&gt;http://ops.m114.org/post/how-to-use-hugo/&lt;/a&gt; ，那是因为content目录下有个post/how-to-use-hugo.md&lt;/p&gt;

&lt;p&gt;public目录是刚才运行&lt;code&gt;hugo server -w&lt;/code&gt;命令生成的，这里边的内容就是静态站点的内容，之后咱们把这些内容提交到gitcafe pages中&lt;/p&gt;

&lt;p&gt;static目录是存放一些静态资源&lt;/p&gt;

&lt;p&gt;themes目录是主题目录，我使用了hyde这个主题，在上面做了一些修改，读者要想让Blog比较个性化，就可以定制主题&lt;/p&gt;

&lt;p&gt;themes/hyde/{layouts,static}是我们主要修改的内容。index.html是首页，你修改一下看看，浏览器会自动刷新看到效果；partials目录是存放的一些页面片段，便于复用；_default目录是博文单页和博文列表页面，相信你一看就懂；static目录中有一些css，想怎么个性化就调整它们就成了&lt;/p&gt;

&lt;h1 id=&#34;使用gitcafe-pages制作站点:fb5094e696928981151e6c76593c6932&#34;&gt;使用gitcafe pages制作站点&lt;/h1&gt;

&lt;p&gt;上面搞定之后，最好把修改之后的内容push到github上。public目录无需push，这是每次都可以自动生成的。咱们这里要把public也作为一个repo，push到gitcafe，生成静态站点。&lt;/p&gt;

&lt;p&gt;gitcafe有个帮助文档：&lt;a href=&#34;https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki&#34;&gt;GitCafe Pages&lt;/a&gt;，照着搞一下，把public的内容push上去，绑定域名，O了&lt;/p&gt;

&lt;p&gt;是不是很简单，有明白的地方可以查看Hugo文档或留言。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
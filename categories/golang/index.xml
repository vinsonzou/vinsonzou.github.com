<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>golang - 分类 - cloudSky's 小站</title><link>https://ops.m114.org/categories/golang/</link><description>golang - 分类 - cloudSky's 小站</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 12 May 2022 11:10:03 +0800</lastBuildDate><atom:link href="https://ops.m114.org/categories/golang/" rel="self" type="application/rss+xml"/><item><title>[Go] 飞书电子表格导出Excel文件</title><link>https://ops.m114.org/post/go-feishu-spreadsheet-export-excel/</link><pubDate>Thu, 12 May 2022 11:10:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-feishu-spreadsheet-export-excel/</guid><description>飞书电子表格网页版有导出Excel功能，但公布的API文档中没有此接口，目前使用读取单元格数据， 然后使用excelize流式写入excel，</description></item><item><title>[Go] 将带参数的函数传递给time.AfterFunc</title><link>https://ops.m114.org/post/go-time-afterfunc-with-arguments/</link><pubDate>Sun, 08 May 2022 19:30:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-time-afterfunc-with-arguments/</guid><description>time.AfterFunc() 接受持续时间和要在该持续时间到期时执行的函数。但函数不能是接受参数的函数。 例如：无法传递以下函数： func Foo (b *Bar) {} 但是，可以初始化调用上述函数的</description></item><item><title>[Go] 怎么正确实现枚举？答案藏着官方的源码里</title><link>https://ops.m114.org/post/go-enum-demo/</link><pubDate>Tue, 18 Jan 2022 10:34:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-enum-demo/</guid><description>后来这两年主要在用Go做项目，我发现相似的问题 Go 里也存在，但是 Go 并没有提供枚举类型，那怎么做到进行状态值的正确限制呢？如果还是用 int 型的常量肯</description></item><item><title>[Go] 使用gin+websocket实现日志实时输出</title><link>https://ops.m114.org/post/go-gin-websocket/</link><pubDate>Fri, 07 Jan 2022 15:48:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-gin-websocket/</guid><description>背景 由于工作需要，在web端执行相关的部署操作，能够在页面实时展示部署任务的实时日志信息，使用到websocket来实现。 websocket</description></item><item><title>[Go] 实时监控日志文件的包tail</title><link>https://ops.m114.org/post/golang-tail/</link><pubDate>Fri, 07 Jan 2022 09:48:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/golang-tail/</guid><description><![CDATA[在linux中有一个tail命令，tail -f 可以实时的监控文件新增加的内容，如果用代码实现这个逻辑，可以使用这个包 go get github.com/hpcloud/tail 示例代码 package main import ( &#34;fmt&#34; &#34;github.com/hpcloud/tail&#34;]]></description></item><item><title>[Go] Gin异步协程</title><link>https://ops.m114.org/post/gin-async/</link><pubDate>Fri, 07 Jan 2022 09:30:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/gin-async/</guid><description><![CDATA[golang的高并发一大利器就是协程。gin里可以借助协程实现异步任务。 package main import ( &#34;log&#34; &#34;time&#34; &#34;github.com/gin-gonic/gin&#34; ) func main(){ router := gin.Default() router.GET(&#34;/sync&#34;, func(c *gin.Context) { time.Sleep(5 * time.Second) log.Println(&#34;Done! in path&#34; + c.Request.URL.Path) }) router.GET(&#34;/async&#34;, func(c *gin.Context) { // 因为涉]]></description></item><item><title>Windows下cmd运行go，出现假死现象，已解决</title><link>https://ops.m114.org/post/fix-windows-cmd-hang/</link><pubDate>Tue, 14 Dec 2021 13:50:03 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/fix-windows-cmd-hang/</guid><description>最近遇到一个很尴尬的现象，现象如下: 在windows上部署了一个go web应用，运行一段时间项目就假死一样，telnet端口是通的，但调用接</description></item><item><title>Golang中uint、int, int8, int16, int32, int64区别</title><link>https://ops.m114.org/post/go-int-vs-uint/</link><pubDate>Wed, 20 Oct 2021 16:47:09 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/go-int-vs-uint/</guid><description>Golang各种数值占据的大小 int 类型大小为 8 字节 int8 类型大小为 1 字节 int16 类型大小为 2 字节 int32 类型大小为 4 字节 int64 类型大小为 8 字节 go语言中的int的</description></item><item><title>golang encrypt/decrypt by MacOS keychain</title><link>https://ops.m114.org/post/golang-aes-crypt/</link><pubDate>Tue, 18 May 2021 10:08:00 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/golang-aes-crypt/</guid><description>功能如下: AES加密/解密 AES秘钥从MacOS keychain读取 支持Data At Rest Encryption (DARE)，加密文件内存占用小于100K，参考 sio</description></item><item><title>4层TCP转发后获得真实IP之proxy_protocol</title><link>https://ops.m114.org/post/tcp-proxy-get-source-ip-by-proxy_protocol/</link><pubDate>Mon, 19 Apr 2021 17:01:15 +0800</pubDate><author><name>CloudSky</name></author><guid>https://ops.m114.org/post/tcp-proxy-get-source-ip-by-proxy_protocol/</guid><description>需求 后端TCP Server在经过TCP代理(nginx stream模块)后，程序不做任何调整获得用户真实IP。 了解到cloudflare的s</description></item></channel></rss>